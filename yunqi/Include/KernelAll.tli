#pragma once
inline void ICmdButton::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  ICmdButton::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline enum DUI_BUTTONSTATE  ICmdButton::GetButtonState()
{
	enum DUI_BUTTONSTATE  _result;
	raw_GetButtonState(&_result);
	return _result;
}

inline void ICmdButton::SetButtonState(enum DUI_BUTTONSTATE  eState  )
{

	raw_SetButtonState(eState  );
}

inline void ICmdButton::SetGraphicsFilePath(tstring  strFilePath, short  nOffsetX, short  nOffsetY, short  nCount, BOOL  bHorz  )
{
	_bstr_t xxx_strFilePath(strFilePath.c_str());
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphicsFilePath(xxx_strFilePath, nOffsetX, nOffsetY, nCount, xxx_bHorz  );
}

inline tstring  ICmdButton::GetGraphicsFilePath()
{
	BSTR _result = NULL;
	raw_GetGraphicsFilePath(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void ICmdButton::SetGraphicshIcon(OLE_HANDLE  hIcon, short  nOffsetX, short  nOffsetY  )
{

	raw_SetGraphicshIcon(hIcon, nOffsetX, nOffsetY  );
}

inline OLE_HANDLE  ICmdButton::GetGraphicshIcon()
{
	OLE_HANDLE  _result;
	raw_GetGraphicshIcon(&_result);
	return _result;
}

inline void ICmdButton::SetUpDownMode(BOOL  bUpDownMode  )
{
	VARIANT_BOOL xxx_bUpDownMode = bUpDownMode ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUpDownMode(xxx_bUpDownMode  );
}

inline BOOL  ICmdButton::IsUpDownMode()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsUpDownMode(&_result);
	return _result ? TRUE : FALSE;
}

inline void ICmdButton::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  ICmdButton::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void ICmdButton::SetGraphicOffset(long  nOffsetX, long  nOffsetY  )
{

	raw_SetGraphicOffset(nOffsetX, nOffsetY  );
}

inline void ICmdButton::GetGraphicOffset(long * pnOffsetX, long * pnOffsetY  )
{

	raw_GetGraphicOffset(pnOffsetX, pnOffsetY  );
}

inline void ICmdButton::ShowText(BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ShowText(xxx_bShow  );
}

inline BOOL  ICmdButton::IsShowText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowText(&_result);
	return _result ? TRUE : FALSE;
}

inline void ICmdButton::SetBackImageSec(enum DUI_BUTTONSTATE  eState, struct IDUIImageBase * pImageBase  )
{

	raw_SetBackImageSec(eState, pImageBase  );
}

inline struct IDUIImageBase * ICmdButton::GetBackImageSec(enum DUI_BUTTONSTATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetBackImageSec(eState, &_result);
	return _result;
}

inline void ICmdButton::SetBackTextStyle(enum DUI_BUTTONSTATE  eState, struct IDUITextStyle * pTextStyle  )
{

	raw_SetBackTextStyle(eState, pTextStyle  );
}

inline struct IDUITextStyle * ICmdButton::GetBackTextStyle(enum DUI_BUTTONSTATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetBackTextStyle(eState, &_result);
	return _result;
}

inline BOOL  ICmdButton::SetGraphicsImage(enum DUI_BUTTONSTATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicsImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * ICmdButton::GetGraphicsImage(enum DUI_BUTTONSTATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetGraphicsImage(eState, &_result);
	return _result;
}

inline void ICmdButton::SetFileIcon(tstring  sFilePath  )
{
	_bstr_t xxx_sFilePath(sFilePath.c_str());

	raw_SetFileIcon(xxx_sFilePath  );
}

inline short  ICmdButton::GetTextLength()
{
	short  _result;
	raw_GetTextLength(&_result);
	return _result;
}

inline void ICmdButton::SetActive(BOOL  bActive  )
{
	VARIANT_BOOL xxx_bActive = bActive ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetActive(xxx_bActive  );
}

inline BOOL  ICmdButton::IsActive()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsActive(&_result);
	return _result ? TRUE : FALSE;
}

inline void ICmdButton::SetGraphicshBitmap(OLE_HANDLE  hBitmap, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphicshBitmap(hBitmap, xxx_bRedraw  );
}

inline OLE_HANDLE  ICmdButton::GetGraphicshBitmap()
{
	OLE_HANDLE  _result;
	raw_GetGraphicshBitmap(&_result);
	return _result;
}

inline BOOL  ICmdButton::SetBackImageFile(enum DUI_BUTTONSTATE  eState, tstring  strFileName  )
{
_bstr_t xxx_strFileName(strFileName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImageFile(eState, xxx_strFileName, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  ICmdButton::SetBackhBitmap(enum DUI_BUTTONSTATE  eState, OLE_HANDLE  hBitmap  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackhBitmap(eState, hBitmap, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  ICmdButton::GetBackhBitmap(enum DUI_BUTTONSTATE  eState  )
{
	OLE_HANDLE  _result;
	raw_GetBackhBitmap(eState, &_result);
	return _result;
}

inline void IDUIAnimate::SetFramesCount(long  nCount  )
{

	raw_SetFramesCount(nCount  );
}

inline long  IDUIAnimate::GetFramesCount()
{
	long  _result;
	raw_GetFramesCount(&_result);
	return _result;
}

inline void IDUIAnimate::SetSpeed(long  nSpeed  )
{

	raw_SetSpeed(nSpeed  );
}

inline long  IDUIAnimate::GetSpeed()
{
	long  _result;
	raw_GetSpeed(&_result);
	return _result;
}

inline void IDUIAnimate::StartAnimate()
{

	raw_StartAnimate();
}

inline void IDUIAnimate::StopAnimate(short  nFrame  )
{

	raw_StopAnimate(nFrame  );
}

inline void IDUIAnimate::SetAutoStop(BOOL  bAutoStop, short  nElapse  )
{
	VARIANT_BOOL xxx_bAutoStop = bAutoStop ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoStop(xxx_bAutoStop, nElapse  );
}

inline void IDUICheckBox::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUICheckBox::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline enum DUI_CHECKBOXSTATE  IDUICheckBox::GetButtonState()
{
	enum DUI_CHECKBOXSTATE  _result;
	raw_GetButtonState(&_result);
	return _result;
}

inline void IDUICheckBox::SetButtonState(enum DUI_CHECKBOXSTATE  eState  )
{

	raw_SetButtonState(eState  );
}

inline enum DUICHECKBOX_VALUE  IDUICheckBox::GetValue()
{
	enum DUICHECKBOX_VALUE  _result;
	raw_GetValue(&_result);
	return _result;
}

inline void IDUICheckBox::SetValue(enum DUICHECKBOX_VALUE  eValue  )
{

	raw_SetValue(eValue  );
}

inline void IDUICheckBox::SetThreeState(BOOL  bThreeState  )
{
	VARIANT_BOOL xxx_bThreeState = bThreeState ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetThreeState(xxx_bThreeState  );
}

inline BOOL  IDUICheckBox::GetThreeState()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetThreeState(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICheckBox::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  IDUICheckBox::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUICheckBox::ShowText(BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ShowText(xxx_bShow  );
}

inline BOOL  IDUICheckBox::IsShowText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowText(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICheckBox::SetPushButtonLike(BOOL  bPushButtonLike  )
{
	VARIANT_BOOL xxx_bPushButtonLike = bPushButtonLike ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetPushButtonLike(xxx_bPushButtonLike  );
}

inline BOOL  IDUICheckBox::IsPushButtonLike()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsPushButtonLike(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICheckBox::SetActive(BOOL  bActive  )
{
	VARIANT_BOOL xxx_bActive = bActive ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetActive(xxx_bActive  );
}

inline BOOL  IDUICheckBox::IsActive()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsActive(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICheckBox::SetData(OLE_HANDLE  hData  )
{

	raw_SetData(hData  );
}

inline OLE_HANDLE  IDUICheckBox::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline void IDUICheckBox::SetGraphics(OLE_HANDLE  hIcon, BOOL  bIsIcon  )
{
	VARIANT_BOOL xxx_bIsIcon = bIsIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphics(hIcon, xxx_bIsIcon  );
}

inline void IDUICheckBox::SetImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue, struct IDUIImageBase * pImageBase  )
{

	raw_SetImage(eState, eValue, pImageBase  );
}

inline struct IDUIImageBase * IDUICheckBox::GetImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue  )
{
	struct IDUIImageBase * _result;
	raw_GetImage(eState, eValue, &_result);
	return _result;
}

inline BOOL  IDUICheckBox::SetGraphicsImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicsImage(eState, eValue, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUICheckBox::GetGraphicsImage(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue  )
{
	struct IDUIImageBase * _result;
	raw_GetGraphicsImage(eState, eValue, &_result);
	return _result;
}

inline void IDUICheckBox::SetImageByHBitmap(enum DUI_CHECKBOXSTATE  eState, enum DUICHECKBOX_VALUE  eValue, OLE_HANDLE  hBitmap  )
{

	raw_SetImageByHBitmap(eState, eValue, hBitmap  );
}

inline void IUIFormObj::SetDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDrawColor(xxx_bDrawColor  );
}

inline BOOL  IUIFormObj::GetDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline void IUIFormObj::SetBackImageSec(struct IDUIImageBase * pImageBase  )
{

	raw_SetBackImageSec(pImageBase  );
}

inline struct IDUIImageBase * IUIFormObj::GetBackImageSec()
{
	struct IDUIImageBase * _result;
	raw_GetBackImageSec(&_result);
	return _result;
}

inline void IUIFormObj::SetBackColor(struct IFillColor * pFillColor  )
{

	raw_SetBackColor(pFillColor  );
}

inline struct IFillColor * IUIFormObj::GetBackColor()
{
	struct IFillColor * _result;
	raw_GetBackColor(&_result);
	return _result;
}

inline BOOL  IUIFormObj::SetBackBitmapPath(tstring  szImagePath, BOOL  bRedraw  )
{
_bstr_t xxx_szImagePath(szImagePath.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackBitmapPath(xxx_szImagePath, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IUIFormObj::GetBackBitmapPath()
{
	BSTR _result = NULL;
	raw_GetBackBitmapPath(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IUIFormObj::SetShowBitmap(BOOL  bShowBitmap  )
{
	VARIANT_BOOL xxx_bShowBitmap = bShowBitmap ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowBitmap(xxx_bShowBitmap  );
}

inline BOOL  IUIFormObj::IsShowBitmap()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowBitmap(&_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIRenderImage * IUIFormObj::SetBackBitmap(OLE_HANDLE  hBitmap  )
{
	struct IDUIRenderImage * _result;
	raw_SetBackBitmap(hBitmap, &_result);
	return _result;
}

inline OLE_HANDLE  IUIFormObj::GetBackBitmap()
{
	OLE_HANDLE  _result;
	raw_GetBackBitmap(&_result);
	return _result;
}

inline void IUIFormObj::DeleteBackBitmap()
{

	raw_DeleteBackBitmap();
}

inline void IRadioBox::SetText(tstring  strText, BOOL  bRedraw  )
{
	_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetText(xxx_strText, xxx_bRedraw  );
}

inline tstring  IRadioBox::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline enum DUI_RADIOBOXSTATE  IRadioBox::GetButtonState()
{
	enum DUI_RADIOBOXSTATE  _result;
	raw_GetButtonState(&_result);
	return _result;
}

inline void IRadioBox::SetButtonState(enum DUI_RADIOBOXSTATE  eState, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetButtonState(eState, xxx_bRedraw  );
}

inline void IRadioBox::SetGraphicsFilePath(tstring  strFilePath, short  nOffsetX, short  nOffsetY, short  nCount, BOOL  bHorz  )
{
	_bstr_t xxx_strFilePath(strFilePath.c_str());
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphicsFilePath(xxx_strFilePath, nOffsetX, nOffsetY, nCount, xxx_bHorz  );
}

inline tstring  IRadioBox::GetGraphicsFilePath()
{
	BSTR _result = NULL;
	raw_GetGraphicsFilePath(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IRadioBox::SetValue(enum DUIRADIOBOX_VALUE  eValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetValue(eValue, xxx_bRedraw  );
}

inline enum DUIRADIOBOX_VALUE  IRadioBox::GetValue()
{
	enum DUIRADIOBOX_VALUE  _result;
	raw_GetValue(&_result);
	return _result;
}

inline void IRadioBox::SetUpDownMode(BOOL  bUpDownMode, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bUpDownMode = bUpDownMode ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUpDownMode(xxx_bUpDownMode, xxx_bRedraw  );
}

inline BOOL  IRadioBox::IsUpDownMode()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsUpDownMode(&_result);
	return _result ? TRUE : FALSE;
}

inline void IRadioBox::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  IRadioBox::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IRadioBox::SetGraphicOffset(long  nOffsetX, long  nOffsetY, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphicOffset(nOffsetX, nOffsetY, xxx_bRedraw  );
}

inline void IRadioBox::GetGraphicOffset(long * pnOffsetX, long * pnOffsetY  )
{

	raw_GetGraphicOffset(pnOffsetX, pnOffsetY  );
}

inline void IRadioBox::ShowText(BOOL  bShow, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ShowText(xxx_bShow, xxx_bRedraw  );
}

inline BOOL  IRadioBox::IsShowText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowText(&_result);
	return _result ? TRUE : FALSE;
}

inline void IRadioBox::StartBlink(short  nIDEvent, short  nElapse  )
{

	raw_StartBlink(nIDEvent, nElapse  );
}

inline void IRadioBox::StopBlink()
{

	raw_StopBlink();
}

inline void IRadioBox::SetChildWndImage(tstring  strPicPath, short  nRightSpaceX, short  nOffsetY  )
{
	_bstr_t xxx_strPicPath(strPicPath.c_str());

	raw_SetChildWndImage(xxx_strPicPath, nRightSpaceX, nOffsetY  );
}

inline void IRadioBox::SetBlinkImage(tstring  strPicPath  )
{
	_bstr_t xxx_strPicPath(strPicPath.c_str());

	raw_SetBlinkImage(xxx_strPicPath  );
}

inline BOOL  IRadioBox::SetBackImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(eState, xxx_bChecked, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IRadioBox::GetBackImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetBackImage(eState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IRadioBox::SetBackColor(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, OLE_COLOR  clrBack  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(eState, xxx_bChecked, clrBack, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_COLOR  IRadioBox::GetBackColor(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	OLE_COLOR  _result;
	raw_GetBackColor(eState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IRadioBox::SetBoxImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBoxImage(eState, xxx_bChecked, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IRadioBox::GetBoxImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetBoxImage(eState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IRadioBox::SetGraphicsImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicsImage(eState, xxx_bChecked, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IRadioBox::GetGraphicsImage(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetGraphicsImage(eState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IRadioBox::SetGraphicsBmp(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, OLE_HANDLE  hBitmap  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicsBmp(eState, xxx_bChecked, hBitmap, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IRadioBox::GetGraphicsBmp(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	OLE_HANDLE  _result;
	raw_GetGraphicsBmp(eState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IRadioBox::SetTextStyle(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked, struct IDUITextStyle * pTextStyle  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextStyle(eState, xxx_bChecked, pTextStyle, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IRadioBox::GetTextStyle(enum DUI_RADIOBOXSTATE  eState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUITextStyle * _result;
	raw_GetTextStyle(eState, xxx_bChecked, &_result);
	return _result;
}

inline void IRadioBox::SetBackDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetBackDrawColor(xxx_bDrawColor  );
}

inline BOOL  IRadioBox::GetBackDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetBackDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline void IRadioBox::SetData(OLE_HANDLE  hData  )
{

	raw_SetData(hData  );
}

inline OLE_HANDLE  IRadioBox::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline BOOL  IRadioBox::SetGraphicSize(long  nWidth, long  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicSize(nWidth, nHeight, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IRadioBox::GetGraphicSize(long * pnWidth, long * pnHeight  )
{

	raw_GetGraphicSize(pnWidth, pnHeight  );
}

inline BOOL  IRadioBox::SetGroupID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGroupID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline void IRadioBox::GetGroupID(long * plResult  )
{

	raw_GetGroupID(plResult  );
}

inline struct IDUIRadioGroup * IRadioBox::GetGroup()
{
	struct IDUIRadioGroup * _result;
	raw_GetGroup(&_result);
	return _result;
}

inline long  IDUIRadioGroup::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline void IDUIRadioGroup::AddObject(struct IRadioBox * pRadioBox  )
{

	raw_AddObject(pRadioBox  );
}

inline void IDUIRadioGroup::RemoveObject(tstring  strName  )
{
	_bstr_t xxx_strName(strName.c_str());

	raw_RemoveObject(xxx_strName  );
}

inline void IDUIRadioGroup::SetRadio(struct IRadioBox * pRadioBox  )
{

	raw_SetRadio(pRadioBox  );
}

inline struct IRadioBox * IDUIRadioGroup::GetRadio()
{
	struct IRadioBox * _result;
	raw_GetRadio(&_result);
	return _result;
}

inline long  IDUIPopupSingleList::AddItem(tstring  strName, tstring  strText, tstring  strShortcut, long  nImageIndex  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strShortcut(strShortcut.c_str());
	long  _result;
	raw_AddItem(xxx_strName, xxx_strText, xxx_strShortcut, nImageIndex, &_result);
	return _result;
}

inline long  IDUIPopupSingleList::InsertItem(long  nIndex, tstring  strName, tstring  strText, tstring  strShortcut, long  nImageIndex  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strShortcut(strShortcut.c_str());
	long  _result;
	raw_InsertItem(nIndex, xxx_strName, xxx_strText, xxx_strShortcut, nImageIndex, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::GetItemText(long  nIndex, BSTR * pstrText, BSTR * pstrShortcut  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetItemText(nIndex, pstrText, pstrShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::SetItemText(long  nIndex, tstring  strText, tstring  strShortcut  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strShortcut(strShortcut.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemText(nIndex, xxx_strText, xxx_strShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::GetItemTextByName(tstring  strName, BSTR * pstrText, BSTR * pstrShortcut  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetItemTextByName(xxx_strName, pstrText, pstrShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::SetItemTextByName(tstring  strName, tstring  strText, tstring  strShortcut  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strShortcut(strShortcut.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTextByName(xxx_strName, xxx_strText, xxx_strShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIPopupSingleList::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline struct PSLItem  IDUIPopupSingleList::GetItem(long  nIndex  )
{
	struct PSLItem  _result;
	raw_GetItem(nIndex, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::SetItem(long  nIndex, struct PSLItem * pItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItem(nIndex, pItem, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIPopupSingleList::GetCurrentItem()
{
	long  _result;
	raw_GetCurrentItem(&_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::SetCurrentItem(long  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetCurrentItem(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::SetItemData(long  nIndex, OLE_HANDLE  hData  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemData(nIndex, hData, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIPopupSingleList::GetItemData(long  nIndex  )
{
	OLE_HANDLE  _result;
	raw_GetItemData(nIndex, &_result);
	return _result;
}

inline tstring  IDUIPopupSingleList::GetItemName(long  nIndex  )
{
	BSTR _result = NULL;
	raw_GetItemName(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline long  IDUIPopupSingleList::GetItemIndex(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	long  _result;
	raw_GetItemIndex(xxx_strName, &_result);
	return _result;
}

inline void IDUIPopupSingleList::SetWinPos(short  x, short  y  )
{

	raw_SetWinPos(x, y  );
}

inline void IDUIPopupSingleList::SetListWidth(short  nWidth  )
{

	raw_SetListWidth(nWidth  );
}

inline short  IDUIPopupSingleList::GetListWidth()
{
	short  _result;
	raw_GetListWidth(&_result);
	return _result;
}

inline void IDUIPopupSingleList::SetListHeight(short  nHeight  )
{

	raw_SetListHeight(nHeight  );
}

inline short  IDUIPopupSingleList::GetListHeight()
{
	short  _result;
	raw_GetListHeight(&_result);
	return _result;
}

inline void IDUIPopupSingleList::SetListMaxHeight(short  nMaxHeight  )
{

	raw_SetListMaxHeight(nMaxHeight  );
}

inline short  IDUIPopupSingleList::GetListMaxHeight()
{
	short  _result;
	raw_GetListMaxHeight(&_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::RemoveItem(long  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItem(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::RemoveItemByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByName(xxx_strName, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::RemoveAll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveAll(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::Show(BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_Show(xxx_bShow, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIPopupSingleList::GetHandle()
{
	OLE_HANDLE  _result;
	raw_GetHandle(&_result);
	return _result;
}

inline void IDUIPopupSingleList::SetDrawItemColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDrawItemColor(xxx_bDrawColor  );
}

inline BOOL  IDUIPopupSingleList::GetDrawItemColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawItemColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::SetItemBackImage(short  nState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemBackImage(nState, xxx_bChecked, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIPopupSingleList::GetItemBackImage(short  nState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetItemBackImage(nState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::SetItemBackColor(short  nState, BOOL  bChecked, OLE_COLOR  clrItemBack  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemBackColor(nState, xxx_bChecked, clrItemBack, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_COLOR  IDUIPopupSingleList::GetItemBackColor(short  nState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	OLE_COLOR  _result;
	raw_GetItemBackColor(nState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::SetItemGraphic(long  nIndex, short  nState, BOOL  bChecked, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemGraphic(nIndex, nState, xxx_bChecked, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIPopupSingleList::GetItemGraphic(long  nIndex, short  nState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetItemGraphic(nIndex, nState, xxx_bChecked, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::SetItemTextStyle(short  nState, BOOL  bChecked, struct IDUITextStyle * pTextStyle  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTextStyle(nState, xxx_bChecked, pTextStyle, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIPopupSingleList::GetItemTextStyle(short  nState, BOOL  bChecked  )
{
	VARIANT_BOOL xxx_bChecked = bChecked ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUITextStyle * _result;
	raw_GetItemTextStyle(nState, xxx_bChecked, &_result);
	return _result;
}

inline void IDUIPopupSingleList::SetDrawBackColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDrawBackColor(xxx_bDrawColor  );
}

inline BOOL  IDUIPopupSingleList::GetDrawBackColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawBackColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::SetBackImage(struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIPopupSingleList::GetBackImage()
{
	struct IDUIImageBase * _result;
	raw_GetBackImage(&_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::SetBackColor(struct IFillColor * pClrBack  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(pClrBack, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIPopupSingleList::GetBackColor()
{
	struct IFillColor * _result;
	raw_GetBackColor(&_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::SetItemHeight(short  nHeight  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemHeight(nHeight, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIPopupSingleList::GetItemHeight()
{
	short  _result;
	raw_GetItemHeight(&_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::SetGraphicIconPath(tstring  strFilePath, short  nOffsetX, short  nOffsetY, short  nCount, BOOL  bHorz  )
{
_bstr_t xxx_strFilePath(strFilePath.c_str());
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicIconPath(xxx_strFilePath, nOffsetX, nOffsetY, nCount, xxx_bHorz, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::SetGraphicIconHandle(OLE_HANDLE  hIcon, short  nOffsetX, short  nOffsetY, short  nCount, BOOL  bHorz  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphicIconHandle(hIcon, nOffsetX, nOffsetY, nCount, xxx_bHorz, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupSingleList::SetNcBorder(struct SkinRect * pRcBorder  )
{

	raw_SetNcBorder(pRcBorder  );
}

inline struct SkinRect  IDUIPopupSingleList::GetNcBorder()
{
	struct SkinRect  _result;
	raw_GetNcBorder(&_result);
	return _result;
}

inline OLE_HANDLE  IDUIPopupSingleList::Create(OLE_HANDLE  hParent, long  nStyle  )
{
	OLE_HANDLE  _result;
	raw_Create(hParent, nStyle, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::IsShow()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShow(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupSingleList::DoMouseWheel(long  wParam, long  lParam  )
{

	raw_DoMouseWheel(wParam, lParam  );
}

inline void IDUIPopupSingleList::SetAnimateType(enum DUI_PSLANIMATETYPE  eType  )
{

	raw_SetAnimateType(eType  );
}

inline enum DUI_PSLANIMATETYPE  IDUIPopupSingleList::GetAnimateType()
{
	enum DUI_PSLANIMATETYPE  _result;
	raw_GetAnimateType(&_result);
	return _result;
}

inline void IDUIPopupSingleList::SetAnimateSpeed(int  nSpeed  )
{

	raw_SetAnimateSpeed(nSpeed  );
}

inline int  IDUIPopupSingleList::GetAnimateSpeed()
{
	int  _result;
	raw_GetAnimateSpeed(&_result);
	return _result;
}

inline void IDUIPopupSingleList::AddOwnerCtrl(struct IDUIControlBase * pOwnerCtrl  )
{

	raw_AddOwnerCtrl(pOwnerCtrl  );
}

inline BOOL  IDUIPopupSingleList::RemoveOwnerCtrl(struct IDUIControlBase * pOwnerCtrl  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveOwnerCtrl(pOwnerCtrl, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIPopupSingleList::GetOwnerCtrl(struct IDUIControlBase *** pOwnerCtrl  )
{
	short  _result;
	raw_GetOwnerCtrl(pOwnerCtrl, &_result);
	return _result;
}

inline void IDUIPopupSingleList::SetActiveOwnerCtrl(struct IDUIControlBase * pOwnerCtrl  )
{

	raw_SetActiveOwnerCtrl(pOwnerCtrl  );
}

inline struct IDUIControlBase * IDUIPopupSingleList::GetActiveOwnerCtrl()
{
	struct IDUIControlBase * _result;
	raw_GetActiveOwnerCtrl(&_result);
	return _result;
}

inline struct PSLItem  IDUIPopupSingleList::SelectNextItem(BOOL  bNext  )
{
	VARIANT_BOOL xxx_bNext = bNext ? VARIANT_TRUE : VARIANT_FALSE;
	struct PSLItem  _result;
	raw_SelectNextItem(xxx_bNext, &_result);
	return _result;
}

inline BOOL  IDUIPopupSingleList::SetItemIconByImgBase(long  nIndex, struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemIconByImgBase(nIndex, pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::SetItemIconByIcon(long  nIndex, OLE_HANDLE  hIcon  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemIconByIcon(nIndex, hIcon, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::SetItemIconByPath(long  nIndex, tstring  strPath, OLE_COLOR  clrTrans  )
{
_bstr_t xxx_strPath(strPath.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemIconByPath(nIndex, xxx_strPath, clrTrans, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::SetItemImageIndex(long  nIndex, long  nImageIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemImageIndex(nIndex, nImageIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::SetImageList(OLE_HANDLE  hImageList  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetImageList(hImageList, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupSingleList::SetIconSize(struct SkinSize * pSknsize  )
{

	raw_SetIconSize(pSknsize  );
}

inline struct SkinSize  IDUIPopupSingleList::GetIconSize()
{
	struct SkinSize  _result;
	raw_GetIconSize(&_result);
	return _result;
}

inline void IDUIPopupSingleList::SetShowIcon(BOOL  bShowIcon  )
{
	VARIANT_BOOL xxx_bShowIcon = bShowIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowIcon(xxx_bShowIcon  );
}

inline BOOL  IDUIPopupSingleList::IsShowIcon()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowIcon(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupSingleList::SetSupportPerPixel(BOOL  bSupportPerPixel  )
{
	VARIANT_BOOL xxx_bSupportPerPixel = bSupportPerPixel ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSupportPerPixel(xxx_bSupportPerPixel  );
}

inline BOOL  IDUIPopupSingleList::IsSupportPerPixel()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsSupportPerPixel(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupSingleList::SetIconOffset(short  nOffsetX, short  nOffsetY  )
{

	raw_SetIconOffset(nOffsetX, nOffsetY  );
}

inline void IDUIPopupSingleList::GetIconOffset(short * pnOffsetX, short * pnOffsetY  )
{

	raw_GetIconOffset(pnOffsetX, pnOffsetY  );
}

inline void IDUIPopupSingleList::Test(struct TestStruct * pTestStruct  )
{

	raw_Test(pTestStruct  );
}

inline struct TestStruct  IDUIPopupSingleList::GetTest()
{
	struct TestStruct  _result;
	raw_GetTest(&_result);
	return _result;
}

inline enum DUI_RENDERENGINE_TYPE  IDUIPopupSingleList::GetRenderType()
{
	enum DUI_RENDERENGINE_TYPE  _result;
	raw_GetRenderType(&_result);
	return _result;
}

inline void IDUIPopupSingleList::SetRenderType(enum DUI_RENDERENGINE_TYPE  eRenderType  )
{

	raw_SetRenderType(eRenderType  );
}

inline void IDUIPopupSingleList::RemoveAllItemByOwnerCtrl(struct IDUIControlBase * pOwnerCtrl, VARIANT_BOOL * pbResult  )
{

	raw_RemoveAllItemByOwnerCtrl(pOwnerCtrl, pbResult  );
}

inline BOOL  IDUIPopupSingleList::GetItemTooltip(long  nIndex, BSTR * pstrText, BSTR * pstrShortcut  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetItemTooltip(nIndex, pstrText, pstrShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIPopupSingleList::SetItemTooltip(long  nIndex, tstring  strText, tstring  strShortcut  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strShortcut(strShortcut.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTooltip(nIndex, xxx_strText, xxx_strShortcut, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl::SetPassword(BOOL  bPassword  )
{
	VARIANT_BOOL xxx_bPassword = bPassword ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetPassword(xxx_bPassword  );
}

inline BOOL  IDUIEditCtrl::IsPassword()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsPassword(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl::SetReadOnly(BOOL  bReadOnly  )
{
	VARIANT_BOOL xxx_bReadOnly = bReadOnly ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetReadOnly(xxx_bReadOnly  );
}

inline BOOL  IDUIEditCtrl::IsReadOnly()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsReadOnly(&_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIEditCtrl::GetTextLength()
{
	long  _result;
	raw_GetTextLength(&_result);
	return _result;
}

inline void IDUIEditCtrl::Clear()
{

	raw_Clear();
}

inline void IDUIEditCtrl::Copy()
{

	raw_Copy();
}

inline void IDUIEditCtrl::Cut()
{

	raw_Cut();
}

inline void IDUIEditCtrl::Paste()
{

	raw_Paste();
}

inline tstring  IDUIEditCtrl::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIEditCtrl::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline void IDUIEditCtrl::GetSel(long * pStartPos, long * pEndPos  )
{

	raw_GetSel(pStartPos, pEndPos  );
}

inline void IDUIEditCtrl::SetSel(long  StartPos, long  EndPos, BOOL  bNoScroll  )
{
	VARIANT_BOOL xxx_bNoScroll = bNoScroll ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSel(StartPos, EndPos, xxx_bNoScroll  );
}

inline void IDUIEditCtrl::SetTextLimit(long  TextLimit  )
{

	raw_SetTextLimit(TextLimit  );
}

inline void IDUIEditCtrl::SetEditFocus()
{

	raw_SetEditFocus();
}

inline void IDUIEditCtrl::KillEditFocus()
{

	raw_KillEditFocus();
}

inline void IDUIEditCtrl::SetDefaultText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetDefaultText(xxx_strText  );
}

inline void IDUIEditCtrl::GetHotKey(long * pHotKey  )
{

	raw_GetHotKey(pHotKey  );
}

inline void IDUIEditCtrl::SetHotKey(short  VirtualKeyCode, short  Modifiers  )
{

	raw_SetHotKey(VirtualKeyCode, Modifiers  );
}

inline void IDUIEditCtrl::SetNumberOnly(BOOL  bNumberOnly  )
{
	VARIANT_BOOL xxx_bNumberOnly = bNumberOnly ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetNumberOnly(xxx_bNumberOnly  );
}

inline BOOL  IDUIEditCtrl::IsActive()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsActive(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl::SetTextFilterFun(OLE_HANDLE  lpCmdFun  )
{

	raw_SetTextFilterFun(lpCmdFun  );
}

inline enum DUI_EDIT_RENDER_HINT  IDUIEditCtrl::GetTextRenderHint()
{
	enum DUI_EDIT_RENDER_HINT  _result;
	raw_GetTextRenderHint(&_result);
	return _result;
}

inline void IDUIEditCtrl::SetTextRenderHint(enum DUI_EDIT_RENDER_HINT  eRenderHint  )
{

	raw_SetTextRenderHint(eRenderHint  );
}

inline void IDUIEditCtrl::SetTextEvent(tstring  strText, BOOL  bEvent  )
{
	_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bEvent = bEvent ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetTextEvent(xxx_strText, xxx_bEvent  );
}

inline void IDUIEditCtrl::SetHotKeyDefaultText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetHotKeyDefaultText(xxx_strText  );
}

inline tstring  IDUIEditCtrl::GetHotKeyDefaultText()
{
	BSTR _result = NULL;
	raw_GetHotKeyDefaultText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIEditCtrl::SetEnableCopy(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnableCopy(xxx_bEnable  );
}

inline void IDUIEditCtrl::SetEnablePaste(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnablePaste(xxx_bEnable  );
}

inline void IDUIEditCtrl::SetEnableCut(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnableCut(xxx_bEnable  );
}

inline BOOL  IDUIEditCtrl::GetEnableCopy()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnableCopy(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIEditCtrl::GetEnablePaste()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnablePaste(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIEditCtrl::GetEnableCut()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnableCut(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl::EnableEditMenu(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableEditMenu(xxx_bEnable  );
}

inline BOOL  IDUIEditCtrl::GetEnableEditMenu()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnableEditMenu(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl::SetEnableDelete(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnableDelete(xxx_bEnable  );
}

inline BOOL  IDUIEditCtrl::GetEnableDelete()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnableDelete(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIEditCtrl::EnableREAutoResize(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableREAutoResize(xxx_bEnable  );
}

inline void IDUIEditCtrl::SetREAutoResizeBorder(long  nMinWidth, long  nMinHeight, long  nMxnWidth, long  nMaxHeight  )
{

	raw_SetREAutoResizeBorder(nMinWidth, nMinHeight, nMxnWidth, nMaxHeight  );
}

inline void IDUIEditCtrl::SetTextStyle(struct IDUITextStyle * pTextStyle, enum DUI_EDIT_STATE  eState  )
{

	raw_SetTextStyle(pTextStyle, eState  );
}

inline BOOL  IDUIHeaderCtrl::SetDrawBackColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawBackColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHeaderCtrl::GetDrawBackColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawBackColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHeaderCtrl::SetBackImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIHeaderCtrl::GetBackImage()
{
	struct IDUIImageBase * _result;
	raw_GetBackImage(&_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl::SetBackColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIHeaderCtrl::GetBackColor(struct IFillColor ** ppFillColor  )
{

	raw_GetBackColor(ppFillColor  );
}

inline BOOL  IDUIHeaderCtrl::SetItemImage(enum DUIHADER_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIHeaderCtrl::GetItemImage(enum DUIHADER_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetItemImage(eState, &_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl::SetItemColor(enum DUIHADER_STATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemColor(eState, pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIHeaderCtrl::GetItemColor(enum DUIHADER_STATE  eState  )
{
	struct IFillColor * _result;
	raw_GetItemColor(eState, &_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl::SetItemTextStyle(enum DUIHADER_STATE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTextStyle(eState, pTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIHeaderCtrl::GetItemTextStyle(enum DUIHADER_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetItemTextStyle(eState, &_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl::SetSupportDrag(BOOL  bCanDrag  )
{
	VARIANT_BOOL xxx_bCanDrag = bCanDrag ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSupportDrag(xxx_bCanDrag, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHeaderCtrl::GetIsCanDrag()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsCanDrag(&_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIHeaderCtrl::InsertItem(short  nPos, tstring  strText, short  nWidth  )
{
_bstr_t xxx_strText(strText.c_str());
	short  _result;
	raw_InsertItem(nPos, xxx_strText, nWidth, &_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl::DeleteItem(short  nPos  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteItem(nPos, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIHeaderCtrl::GetItemCount()
{
	short  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline void IDUIHeaderCtrl::SetOwnerCtrl(struct IDUIControlBase * pOwnerCtrl  )
{

	raw_SetOwnerCtrl(pOwnerCtrl  );
}

inline struct IDUIControlBase * IDUIHeaderCtrl::GetOwnerCtrl()
{
	struct IDUIControlBase * _result;
	raw_GetOwnerCtrl(&_result);
	return _result;
}

inline BOOL  IDUIHeaderCtrl::SetDrawItemColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawItemColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHeaderCtrl::GetDrawItemColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawItemColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHeaderCtrl::SetDividerColor(OLE_COLOR  clrDivider  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDividerColor(clrDivider, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_COLOR  IDUIHeaderCtrl::GetDividerColor()
{
	OLE_COLOR  _result;
	raw_GetDividerColor(&_result);
	return _result;
}

inline void IDUIHeaderCtrl::SetScrollPos(long  nPos, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetScrollPos(nPos, xxx_bRedraw  );
}

inline void IDUIHeaderCtrl::GetScrollPos(long * plResult  )
{

	raw_GetScrollPos(plResult  );
}

inline void IDUIHeaderCtrl::SetShowSortIcon(BOOL  bShowSortIcon  )
{
	VARIANT_BOOL xxx_bShowSortIcon = bShowSortIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowSortIcon(xxx_bShowSortIcon  );
}

inline BOOL  IDUIHeaderCtrl::GetShowSortIcon()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetShowSortIcon(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIHeaderCtrl::SetItemSort(short  nIndex, enum DUI_HEADERCTRL_SORT  eSortType, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemSort(nIndex, eSortType, xxx_bRedraw  );
}

inline void IDUIHeaderCtrl::GetCurSortItem(short * pnResult, enum DUI_HEADERCTRL_SORT * peResult  )
{

	raw_GetCurSortItem(pnResult, peResult  );
}

inline void IDUIHeaderCtrl::SetItemWidth(short  nIndex, short  nWidth, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemWidth(nIndex, nWidth, xxx_bRedraw  );
}

inline enum DUICHECKBOX_VALUE  IDUIHeaderCtrl::GetItemCheckState(short  nIndex  )
{
	enum DUICHECKBOX_VALUE  _result;
	raw_GetItemCheckState(nIndex, &_result);
	return _result;
}

inline void IDUIHeaderCtrl::SetItemCheckState(short  nIndex, enum DUICHECKBOX_VALUE  eState  )
{

	raw_SetItemCheckState(nIndex, eState  );
}

inline void IDUIHeaderCtrl::ShowItemCheckBox(short  nIndex, BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ShowItemCheckBox(nIndex, xxx_bShow  );
}

inline void IDUIHeaderCtrl::DragDrogItem(short  nDradForm, short  nDrawTo  )
{

	raw_DragDrogItem(nDradForm, nDrawTo  );
}

inline void IDUIHeaderCtrl::SetTextAlignType(short  nIndex, enum DUI_HEADERCTRL_ALIGNTYPE  eType  )
{

	raw_SetTextAlignType(nIndex, eType  );
}

inline void IDUIHeaderCtrl::SetHeadCheckValue(long  eCheck, short  nIndex  )
{

	raw_SetHeadCheckValue(eCheck, nIndex  );
}

inline BOOL  IDUItemContainer::IsChecked()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsChecked(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUItemContainer::SetChecked(BOOL  bCheck  )
{
	VARIANT_BOOL xxx_bCheck = bCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetChecked(xxx_bCheck  );
}

inline void IDUItemContainer::SetState(enum DUI_ITEMCSTATE  eState, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetState(eState, xxx_bRedraw  );
}

inline enum DUI_ITEMCSTATE  IDUItemContainer::GetState()
{
	enum DUI_ITEMCSTATE  _result;
	raw_GetState(&_result);
	return _result;
}

inline void IDUItemContainer::SetBackImage(enum DUI_ITEMCSTATE  eState, long  bCheck, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetBackImage(eState, bCheck, pImageBase, xxx_bRedraw  );
}

inline struct IDUIImageBase * IDUItemContainer::GetBackImage(enum DUI_ITEMCSTATE  eState, long  bCheck  )
{
	struct IDUIImageBase * _result;
	raw_GetBackImage(eState, bCheck, &_result);
	return _result;
}

inline void IDUIListView::SetListType(enum DUILV_STYLE  eListType, BOOL  bRedraw, VARIANT_BOOL * pbResult  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetListType(eListType, xxx_bRedraw, pbResult  );
}

inline enum DUILV_STYLE  IDUIListView::GetListType()
{
	enum DUILV_STYLE  _result;
	raw_GetListType(&_result);
	return _result;
}

inline BOOL  IDUIListView::SetDrawBackColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawBackColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView::IsDrawBackColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawBackColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView::SetBackImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIListView::GetBackImage()
{
	struct IDUIImageBase * _result;
	raw_GetBackImage(&_result);
	return _result;
}

inline BOOL  IDUIListView::SetBackColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIListView::GetBackColor()
{
	struct IFillColor * _result;
	raw_GetBackColor(&_result);
	return _result;
}

inline BOOL  IDUIListView::SetDrawItemColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawItemColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView::IsDrawItemColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawItemColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView::SetItemHeight(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemHeight(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIListView::GetItemHeight()
{
	short  _result;
	raw_GetItemHeight(&_result);
	return _result;
}

inline BOOL  IDUIListView::SetItemWidth(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemWidth(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIListView::GetItemWidth()
{
	short  _result;
	raw_GetItemWidth(&_result);
	return _result;
}

inline BOOL  IDUIListView::SetItemDefImage(enum DUILVI_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemDefImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIListView::GetItemDefImage(enum DUILVI_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetItemDefImage(eState, &_result);
	return _result;
}

inline BOOL  IDUIListView::SetItemDefColor(enum DUILVI_STATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemDefColor(eState, pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIListView::GetItemDefColor(enum DUILVI_STATE  eState  )
{
	struct IFillColor * _result;
	raw_GetItemDefColor(eState, &_result);
	return _result;
}

inline BOOL  IDUIListView::SetTextStyle(enum DUILVI_STATE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextStyle(eState, pTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIListView::GetTextStyle(enum DUILVI_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetTextStyle(eState, &_result);
	return _result;
}

inline BOOL  IDUIListView::SetItemSpace(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemSpace(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIListView::GetItemSpace()
{
	short  _result;
	raw_GetItemSpace(&_result);
	return _result;
}

inline void IDUIListView::SetScrollSize(long  nSize  )
{

	raw_SetScrollSize(nSize  );
}

inline long  IDUIListView::GetScrollSize()
{
	long  _result;
	raw_GetScrollSize(&_result);
	return _result;
}

inline void IDUIListView::SetLeftScroll(BOOL  bLeftScroll  )
{
	VARIANT_BOOL xxx_bLeftScroll = bLeftScroll ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetLeftScroll(xxx_bLeftScroll  );
}

inline BOOL  IDUIListView::IsLeftScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsLeftScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIListView::InsertItem(long  nItem, tstring  szItem, long  nID, BOOL  bRefresh  )
{
_bstr_t xxx_szItem(szItem.c_str());
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;
	short  _result;
	raw_InsertItem(nItem, xxx_szItem, nID, xxx_bRefresh, &_result);
	return _result;
}

inline struct IDUIControlBase * IDUIListView::GetObject(tstring  strParent, tstring  strName  )
{
_bstr_t xxx_strParent(strParent.c_str());
_bstr_t xxx_strName(strName.c_str());
	struct IDUIControlBase * _result;
	raw_GetObject(xxx_strParent, xxx_strName, &_result);
	return _result;
}

inline void IDUIListView::SetListModel(struct IDUIControlBase * pUIForm  )
{

	raw_SetListModel(pUIForm  );
}

inline BOOL  IDUIListView::SetItemImage(long  nItem, enum DUILVI_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemImage(nItem, eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIListView::GetItemImage(long  nItem, enum DUILVI_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetItemImage(nItem, eState, &_result);
	return _result;
}

inline BOOL  IDUIListView::SetItemColor(long  nItem, enum DUILVI_STATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemColor(nItem, eState, pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIListView::GetItemColor(long  nItem, enum DUILVI_STATE  eState  )
{
	struct IFillColor * _result;
	raw_GetItemColor(nItem, eState, &_result);
	return _result;
}

inline long  IDUIListView::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline void IDUIListView::DeleteItem(long  nItem  )
{

	raw_DeleteItem(nItem  );
}

inline void IDUIListView::DeleteAllItems()
{

	raw_DeleteAllItems();
}

inline BOOL  IDUIListView::SetItemText(long  nItem, short  iSubItem, tstring  szItem, BOOL  bRedraw  )
{
_bstr_t xxx_szItem(szItem.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemText(nItem, iSubItem, xxx_szItem, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIListView::GetItemText(long  nItem, short  iSubItem  )
{
	BSTR _result = NULL;
	raw_GetItemText(nItem, iSubItem, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUIListView::SetItemData(long  nItem, OLE_HANDLE  hData  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemData(nItem, hData, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIListView::GetItemData(long  nItem  )
{
	OLE_HANDLE  _result;
	raw_GetItemData(nItem, &_result);
	return _result;
}

inline struct SkinRect  IDUIListView::GetItemRect(long  nItem  )
{
	struct SkinRect  _result;
	raw_GetItemRect(nItem, &_result);
	return _result;
}

inline BOOL  IDUIListView::SetItemGraphic(long  nItem, enum DUILVI_STATE  eState, OLE_HANDLE  hBitmap  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemGraphic(nItem, eState, hBitmap, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIListView::GetItemGraphic(long  nItem, enum DUILVI_STATE  eState  )
{
	OLE_HANDLE  _result;
	raw_GetItemGraphic(nItem, eState, &_result);
	return _result;
}

inline void IDUIListView::SetControlID(short  nIndex  )
{

	raw_SetControlID(nIndex  );
}

inline short  IDUIListView::GetControlID()
{
	short  _result;
	raw_GetControlID(&_result);
	return _result;
}

inline void IDUIListView::SetUseScrollBar(BOOL  bUseScrollBar  )
{
	VARIANT_BOOL xxx_bUseScrollBar = bUseScrollBar ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseScrollBar(xxx_bUseScrollBar  );
}

inline BOOL  IDUIListView::IsUserScrollBar()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsUserScrollBar(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::RefreshView()
{

	raw_RefreshView();
}

inline struct IDUIControlBase * IDUIListView::GetResObject(long  nItem, tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUIControlBase * _result;
	raw_GetResObject(nItem, xxx_strName, &_result);
	return _result;
}

inline struct IDUIControlBase * IDUIListView::GetHeaderCtrl()
{
	struct IDUIControlBase * _result;
	raw_GetHeaderCtrl(&_result);
	return _result;
}

inline struct IDUILVColumn * IDUIListView::InsertColumn(short  nCol, tstring  strText, short  nWidth  )
{
_bstr_t xxx_strText(strText.c_str());
	struct IDUILVColumn * _result;
	raw_InsertColumn(nCol, xxx_strText, nWidth, &_result);
	return _result;
}

inline BOOL  IDUIListView::DeleteColumn(short  nCol  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteColumn(nCol, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUILVColumn * IDUIListView::GetColumn(short  nCol  )
{
	struct IDUILVColumn * _result;
	raw_GetColumn(nCol, &_result);
	return _result;
}

inline BOOL  IDUIListView::IsDrawGrid()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawGrid(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetDrawGrid(BOOL  bDrawGrid  )
{
	VARIANT_BOOL xxx_bDrawGrid = bDrawGrid ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDrawGrid(xxx_bDrawGrid  );
}

inline BOOL  IDUIListView::AppendItemText(long  nItem, short  iSubItem, tstring  szItem, tstring  szURL, BOOL  bRedraw  )
{
_bstr_t xxx_szItem(szItem.c_str());
_bstr_t xxx_szURL(szURL.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendItemText(nItem, iSubItem, xxx_szItem, xxx_szURL, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView::AppendImage(long  nItem, short  iSubItem, tstring  szImagePath, BOOL  bRedraw  )
{
_bstr_t xxx_szImagePath(szImagePath.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendImage(nItem, iSubItem, xxx_szImagePath, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIListView::GetUnitItemStaticTextStyle(enum DUILVI_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetUnitItemStaticTextStyle(eState, &_result);
	return _result;
}

inline struct IDUITextStyle * IDUIListView::GetUnitItemUrlTextStyle(enum DUILVI_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetUnitItemUrlTextStyle(eState, &_result);
	return _result;
}

inline BOOL  IDUIListView::SetUnitItemStaticTextStyle(enum DUILVI_STATE  eState, struct IDUITextStyle * ppTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetUnitItemStaticTextStyle(eState, ppTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIUnitItem * IDUIListView::GetUnitItem(long  nRow, short  nCol  )
{
	struct IDUIUnitItem * _result;
	raw_GetUnitItem(nRow, nCol, &_result);
	return _result;
}

inline BOOL  IDUIListView::SetUnitItemUrlTextStyle(enum DUILVI_STATE  eState, struct IDUITextStyle * ppTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetUnitItemUrlTextStyle(eState, ppTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView::IsAutoResizeItemHeight()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoResizeItemHeight(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetAutoResizeItemHeight(BOOL  bResult  )
{
	VARIANT_BOOL xxx_bResult = bResult ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoResizeItemHeight(xxx_bResult  );
}

inline struct IDUITVItemBase * IDUIListView::GetSelItem()
{
	struct IDUITVItemBase * _result;
	raw_GetSelItem(&_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUIListView::AddGroup(long  nID, tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_AddGroup(nID, xxx_strName, &_result);
	return _result;
}

inline BOOL  IDUIListView::RemoveGroupByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveGroupByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView::RemoveGroupByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveGroupByName(xxx_strName, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::RemoveAllGroup()
{

	raw_RemoveAllGroup();
}

inline struct IDUITVItemGroup * IDUIListView::GetGroupByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_GetGroupByName(xxx_strName, &_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUIListView::GetGroupByID(long  nID  )
{
	struct IDUITVItemGroup * _result;
	raw_GetGroupByID(nID, &_result);
	return _result;
}

inline long  IDUIListView::GetGroupCount()
{
	long  _result;
	raw_GetGroupCount(&_result);
	return _result;
}

inline BOOL  IDUIListView::SetShowGroup(BOOL  bShow, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetShowGroup(xxx_bShow, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView::GetShowGroup()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetShowGroup(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::RemoveItem(struct IDUITVItem * pItem  )
{

	raw_RemoveItem(pItem  );
}

inline void IDUIListView::SetAutoAdjustIcon(BOOL  bAutoAdjust  )
{
	VARIANT_BOOL xxx_bAutoAdjust = bAutoAdjust ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoAdjustIcon(xxx_bAutoAdjust  );
}

inline BOOL  IDUIListView::IsAutoAdjustIcon()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoAdjustIcon(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetIconAdjustSize(long  nWidth, long  nHeight  )
{

	raw_SetIconAdjustSize(nWidth, nHeight  );
}

inline void IDUIListView::GetIconAdjustSize(long * pnWidth, long * pnHeight  )
{

	raw_GetIconAdjustSize(pnWidth, pnHeight  );
}

inline void IDUIListView::SetIconOffset(long  nOffsetX, long  nOffsetY  )
{

	raw_SetIconOffset(nOffsetX, nOffsetY  );
}

inline void IDUIListView::GetIconOffset(long * pnOffsetX, long * pnOffsetY  )
{

	raw_GetIconOffset(pnOffsetX, pnOffsetY  );
}

inline void IDUIListView::SetSupportMultiSel(BOOL  bMutilSel  )
{
	VARIANT_BOOL xxx_bMutilSel = bMutilSel ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSupportMultiSel(xxx_bMutilSel  );
}

inline BOOL  IDUIListView::IsSupportMultiSel()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsSupportMultiSel(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::GetSelItemCount(long * pnResult  )
{

	raw_GetSelItemCount(pnResult  );
}

inline struct IDUITVItemBase * IDUIListView::GetFirstSelItem()
{
	struct IDUITVItemBase * _result;
	raw_GetFirstSelItem(&_result);
	return _result;
}

inline struct IDUITVItemBase * IDUIListView::GetNextSelItem(struct IDUITVItemBase * pItem  )
{
	struct IDUITVItemBase * _result;
	raw_GetNextSelItem(pItem, &_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUIListView::InsertGroup(long  nIndex, long  nID, tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_InsertGroup(nIndex, nID, xxx_strName, &_result);
	return _result;
}

inline void IDUIListView::SortItems(OLE_HANDLE  lpCmdFun, struct IDUITVItemGroup * pParentItem, BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SortItems(lpCmdFun, pParentItem, xxx_bRefresh  );
}

inline void IDUIListView::SetShowText(BOOL  bShowText, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bShowText = bShowText ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowText(xxx_bShowText, xxx_bRedraw  );
}

inline BOOL  IDUIListView::IsShowText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowText(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetSelItem(struct IDUITVItemBase * pItemBase, BOOL  bChangePos  )
{
	VARIANT_BOOL xxx_bChangePos = bChangePos ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSelItem(pItemBase, xxx_bChangePos  );
}

inline struct IDUITVItemBase * IDUIListView::GetItem(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemBase * _result;
	raw_GetItem(xxx_strName, &_result);
	return _result;
}

inline struct IDUITVItemBase * IDUIListView::GetAt(long  nIndex  )
{
	struct IDUITVItemBase * _result;
	raw_GetAt(nIndex, &_result);
	return _result;
}

inline BOOL  IDUIListView::IsDragable()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDragable(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::EnableDragable(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableDragable(xxx_bEnable  );
}

inline BOOL  IDUIListView::IsDragByPostMsg()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDragByPostMsg(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetDragByPostMsg(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDragByPostMsg(xxx_bEnable  );
}

inline BOOL  IDUIListView::IsExpendByIcon()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsExpendByIcon(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetExpendByIcon(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetExpendByIcon(xxx_bEnable  );
}

inline void IDUIListView::SetSupportGroup(BOOL  bSupportGroup  )
{
	VARIANT_BOOL xxx_bSupportGroup = bSupportGroup ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSupportGroup(xxx_bSupportGroup  );
}

inline BOOL  IDUIListView::IsSupportGroup()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsSupportGroup(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView::VScroll(long  nScrollSize  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_VScroll(nScrollSize, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIListView::GetVScrollPos()
{
	long  _result;
	raw_GetVScrollPos(&_result);
	return _result;
}

inline struct IDUIControlBase * IDUIListView::GetListModel()
{
	struct IDUIControlBase * _result;
	raw_GetListModel(&_result);
	return _result;
}

inline void IDUIListView::SetCheckBoxStyle(BOOL  bHasCheckBox, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bHasCheckBox = bHasCheckBox ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCheckBoxStyle(xxx_bHasCheckBox, xxx_bRedraw  );
}

inline BOOL  IDUIListView::GetCheckBoxStyle()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetCheckBoxStyle(&_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIListView::GetCheckItemCount()
{
	long  _result;
	raw_GetCheckItemCount(&_result);
	return _result;
}

inline struct IDUITVItem * IDUIListView::GetFirstCheckItem()
{
	struct IDUITVItem * _result;
	raw_GetFirstCheckItem(&_result);
	return _result;
}

inline struct IDUITVItem * IDUIListView::GetNextCheckItem(struct IDUITVItem * pItem  )
{
	struct IDUITVItem * _result;
	raw_GetNextCheckItem(pItem, &_result);
	return _result;
}

inline void IDUIListView::SetCheckItem(struct IDUITVItem * pItem, BOOL  bCheck  )
{
	VARIANT_BOOL xxx_bCheck = bCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCheckItem(pItem, xxx_bCheck  );
}

inline BOOL  IDUIListView::SetColumnUserModule(int  nCol, struct IDUIControlBase * pIControlBaseModule  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetColumnUserModule(nCol, pIControlBaseModule, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIControlBase * IDUIListView::GetColumnUserModule(int  nCol  )
{
	struct IDUIControlBase * _result;
	raw_GetColumnUserModule(nCol, &_result);
	return _result;
}

inline struct IDUIControlBase * IDUIListView::GetItemCtrlBase(long  nRow, short  nCol  )
{
	struct IDUIControlBase * _result;
	raw_GetItemCtrlBase(nRow, nCol, &_result);
	return _result;
}

inline struct IDUITVItemBase * IDUIListView::GetLastVisibleItem()
{
	struct IDUITVItemBase * _result;
	raw_GetLastVisibleItem(&_result);
	return _result;
}

inline void IDUIListView::SetMultiSelItem(struct IDUITVItemBase * pItemBase, BOOL  bAutoCancelSel  )
{
	VARIANT_BOOL xxx_bAutoCancelSel = bAutoCancelSel ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetMultiSelItem(pItemBase, xxx_bAutoCancelSel  );
}

inline void IDUIListView::SetUserModulePosition(int  nCol, int  nOffsetX, int  nOffsetY, int  nRightMargin, int  nHeight  )
{

	raw_SetUserModulePosition(nCol, nOffsetX, nOffsetY, nRightMargin, nHeight  );
}

inline BOOL  IDUIListView::CanExpandGroup()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_CanExpandGroup(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetAllItemCheck(BOOL  bCheck  )
{
	VARIANT_BOOL xxx_bCheck = bCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAllItemCheck(xxx_bCheck  );
}

inline void IDUIListView::ReDraw()
{

	raw_ReDraw();
}

inline BOOL  IDUIListView::IsCustomClickOnly()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsCustomClickOnly(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetCustomClickOnly(BOOL  bResult  )
{
	VARIANT_BOOL xxx_bResult = bResult ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCustomClickOnly(xxx_bResult  );
}

inline BOOL  IDUIListView::SwapCol(long  nIndex1, long  nIndex2  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SwapCol(nIndex1, nIndex2, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetItemState(long  nRow, enum DUILVI_STATE  eState  )
{

	raw_SetItemState(nRow, eState  );
}

inline void IDUIListView::StartMultiSel(BOOL  bStartMulti  )
{
	VARIANT_BOOL xxx_bStartMulti = bStartMulti ? VARIANT_TRUE : VARIANT_FALSE;

	raw_StartMultiSel(xxx_bStartMulti  );
}

inline BOOL  IDUIListView::IsStartMultiSel()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsStartMultiSel(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView::AppendImageByHBitmap(long  nItem, short  iSubItem, OLE_HANDLE  hBitmap, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendImageByHBitmap(nItem, iSubItem, hBitmap, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListView::AppendImageByHIcon(long  nItem, short  iSubItem, OLE_HANDLE  hIcon, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendImageByHIcon(nItem, iSubItem, hIcon, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetGroupHeight(long  lHeight  )
{

	raw_SetGroupHeight(lHeight  );
}

inline long  IDUIListView::GetGroupHeight()
{
	long  _result;
	raw_GetGroupHeight(&_result);
	return _result;
}

inline void IDUIListView::SelectAllItem(BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SelectAllItem(xxx_bRefresh  );
}

inline void IDUIListView::UnSelectAllItem(BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_UnSelectAllItem(xxx_bRefresh  );
}

inline OLE_HANDLE  IDUIListView::GetListViewNofiyInfo(OLE_HANDLE  hInfo  )
{
	OLE_HANDLE  _result;
	raw_GetListViewNofiyInfo(hInfo, &_result);
	return _result;
}

inline void IDUIListView::SetVerSpace(long  nSize  )
{

	raw_SetVerSpace(nSize  );
}

inline long  IDUIListView::GetVisibleCount()
{
	long  _result;
	raw_GetVisibleCount(&_result);
	return _result;
}

inline void IDUIListView::SetScrollBar(OLE_HANDLE  pScrollBar  )
{

	raw_SetScrollBar(pScrollBar  );
}

inline BOOL  IDUIListView::IsDrawVerGrid()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawVerGrid(&_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIListView::GetIconRowCount()
{
	long  _result;
	raw_GetIconRowCount(&_result);
	return _result;
}

inline void IDUIListView::SetUseRollOver(BOOL  bRollOver  )
{
	VARIANT_BOOL xxx_bRollOver = bRollOver ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseRollOver(xxx_bRollOver  );
}

inline BOOL  IDUIListView::IsUseRollOver()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsUseRollOver(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::ScrollOver(BOOL  bTop  )
{
	VARIANT_BOOL xxx_bTop = bTop ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ScrollOver(xxx_bTop  );
}

inline struct IDUIScrollBar * IDUIListView::GetExternalScrollBar()
{
	struct IDUIScrollBar * _result;
	raw_GetExternalScrollBar(&_result);
	return _result;
}

inline struct IDUITVItemBase * IDUIListView::GetItemByID(long  nID  )
{
	struct IDUITVItemBase * _result;
	raw_GetItemByID(nID, &_result);
	return _result;
}

inline void IDUIListView::SetDblClkHighPriority(BOOL  bHigh  )
{
	VARIANT_BOOL xxx_bHigh = bHigh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDblClkHighPriority(xxx_bHigh  );
}

inline BOOL  IDUIListView::GetDblClkHighPriority()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDblClkHighPriority(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetItemEnable(long  nIndex, BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemEnable(nIndex, xxx_bEnable  );
}

inline void IDUIListView::SetBottomExtent(long  nExtent  )
{

	raw_SetBottomExtent(nExtent  );
}

inline long  IDUIListView::GetBottomExtent()
{
	long  _result;
	raw_GetBottomExtent(&_result);
	return _result;
}

inline BOOL  IDUIListView::SwapItem(struct IDUITVItemBase * pItem, struct IDUITVItemBase * pOtherItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SwapItem(pItem, pOtherItem, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListView::SetVirListItemsNum(long  nNum  )
{

	raw_SetVirListItemsNum(nNum  );
}

inline void IDUIListView::SetUseVirList(BOOL  bUse  )
{
	VARIANT_BOOL xxx_bUse = bUse ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseVirList(xxx_bUse  );
}

inline void IDUIListView::SetUseVirGroupList(BOOL  bUse  )
{
	VARIANT_BOOL xxx_bUse = bUse ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseVirGroupList(xxx_bUse  );
}

inline void IDUIListView::SetVirGroupNum(long  nNum, struct IDUITVItemGroup * pParent  )
{

	raw_SetVirGroupNum(nNum, pParent  );
}

inline void IDUIListView::SetVirSonItemNum(long  nNum, struct IDUITVItemGroup * pParent  )
{

	raw_SetVirSonItemNum(nNum, pParent  );
}

inline void IDUIListView::SetAutoDrop(BOOL  bAutoDrop  )
{
	VARIANT_BOOL xxx_bAutoDrop = bAutoDrop ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoDrop(xxx_bAutoDrop  );
}

inline void IDUIListView::SetHorScrollBar(OLE_HANDLE  pScrollBar  )
{

	raw_SetHorScrollBar(pScrollBar  );
}

inline void IDUIListView::RefreshVirGroup()
{

	raw_RefreshVirGroup();
}

inline void IDUIListView::SetDragingHoverItemHot(BOOL  bNeed  )
{
	VARIANT_BOOL xxx_bNeed = bNeed ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDragingHoverItemHot(xxx_bNeed  );
}

inline void IDUIListView::SetDragingHoverGroupHot(BOOL  bNeed  )
{
	VARIANT_BOOL xxx_bNeed = bNeed ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDragingHoverGroupHot(xxx_bNeed  );
}

inline void IDUIListView::ExpandAllTopVirGroup(BOOL  bExpand  )
{
	VARIANT_BOOL xxx_bExpand = bExpand ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ExpandAllTopVirGroup(xxx_bExpand  );
}

inline long  IDUIListView::GetSelectedItemIDList(struct DUILV_IDPAIR ** ppIdPair  )
{
	long  _result;
	raw_GetSelectedItemIDList(ppIdPair, &_result);
	return _result;
}

inline void IDUIListView::VirGroupVScroll(long  nDistance  )
{

	raw_VirGroupVScroll(nDistance  );
}

inline void IDUIListView::UpdateVirtualListData()
{

	raw_UpdateVirtualListData();
}

inline BOOL  IDUILVColumn::SetColumnWidth(short  nWidth  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetColumnWidth(nWidth, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUILVColumn::GetColumnWidth()
{
	short  _result;
	raw_GetColumnWidth(&_result);
	return _result;
}

inline BOOL  IDUILVColumn::SetTextStyle(enum DUILVI_STATE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextStyle(eState, pTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUILVColumn::GetTextStyle(enum DUILVI_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetTextStyle(eState, &_result);
	return _result;
}

inline void IDUILVColumn::SetAlignMode(enum DUILV_UNITITEM_HORZ  eHovAlign, enum DUILV_UNITITEM_VERT  eVerAlign  )
{

	raw_SetAlignMode(eHovAlign, eVerAlign  );
}

inline enum DUILV_UNITITEM_VERT  IDUILVColumn::GetVerAlignMode()
{
	enum DUILV_UNITITEM_VERT  _result;
	raw_GetVerAlignMode(&_result);
	return _result;
}

inline enum DUILV_UNITITEM_HORZ  IDUILVColumn::GetHorzAlignMode()
{
	enum DUILV_UNITITEM_HORZ  _result;
	raw_GetHorzAlignMode(&_result);
	return _result;
}

inline void IDUILVColumn::SetSort(BOOL  bSort  )
{
	VARIANT_BOOL xxx_bSort = bSort ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSort(xxx_bSort  );
}

inline BOOL  IDUILVColumn::GetSort()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetSort(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIUnitItem::AppendStatic(tstring  strText, tstring  strURL  )
{
	_bstr_t xxx_strText(strText.c_str());
	_bstr_t xxx_strURL(strURL.c_str());

	raw_AppendStatic(xxx_strText, xxx_strURL  );
}

inline void IDUIUnitItem::AppendImage(tstring  strImagePath  )
{
	_bstr_t xxx_strImagePath(strImagePath.c_str());

	raw_AppendImage(xxx_strImagePath  );
}

inline void IDUIUnitItem::SetAlignMode(enum DUILV_UNITITEM_HORZ  eHovAlign, enum DUILV_UNITITEM_VERT  eVerAlign  )
{

	raw_SetAlignMode(eHovAlign, eVerAlign  );
}

inline enum DUILV_UNITITEM_VERT  IDUIUnitItem::GetVerAlignMode()
{
	enum DUILV_UNITITEM_VERT  _result;
	raw_GetVerAlignMode(&_result);
	return _result;
}

inline enum DUILV_UNITITEM_HORZ  IDUIUnitItem::GetHorzAlignMode()
{
	enum DUILV_UNITITEM_HORZ  _result;
	raw_GetHorzAlignMode(&_result);
	return _result;
}

inline long  IDUIUnitItem::GetUnitItemCount()
{
	long  _result;
	raw_GetUnitItemCount(&_result);
	return _result;
}

inline void IDUIUnitItem::GetUnitItemData(long  nIndex, BSTR * strText, BSTR * strURL, BSTR * strImagePath  )
{

	raw_GetUnitItemData(nIndex, strText, strURL, strImagePath  );
}

inline void IDUIUnitItem::Reset()
{

	raw_Reset();
}

inline void IDUIUnitItem::SetTextStyle(struct IDUITextStyle * pTextStyle, enum DUILVI_STATE  eState  )
{

	raw_SetTextStyle(pTextStyle, eState  );
}

inline struct IDUITextStyle * IDUIUnitItem::GetTextStyle(enum DUILVI_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetTextStyle(eState, &_result);
	return _result;
}

inline struct SkinRect  IDUIUnitItem::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline long  IDUIUnitItem::IsUserModule()
{
	long  _result;
	raw_IsUserModule(&_result);
	return _result;
}

inline struct IDUIControlBase * IDUIUnitItem::GetControlBase()
{
	struct IDUIControlBase * _result;
	raw_GetControlBase(&_result);
	return _result;
}

inline void IDUIUnitItem::SetToolTipText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetToolTipText(xxx_strText  );
}

inline void IDUITVItemBase::SetText(tstring  strText, BOOL  bRedraw  )
{
	_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetText(xxx_strText, xxx_bRedraw  );
}

inline tstring  IDUITVItemBase::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITVItemBase::SetID(long  nID  )
{

	raw_SetID(nID  );
}

inline long  IDUITVItemBase::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline BOOL  IDUITVItemBase::SetData(OLE_HANDLE  hData  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetData(hData, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUITVItemBase::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline enum DUILV_TYPE  IDUITVItemBase::GetType()
{
	enum DUILV_TYPE  _result;
	raw_GetType(&_result);
	return _result;
}

inline void IDUITVItemBase::SetObjPtr(OLE_HANDLE  pObjPtr  )
{

	raw_SetObjPtr(pObjPtr  );
}

inline struct SkinRect  IDUITVItemBase::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUITVItemBase::GetGroup()
{
	struct IDUITVItemGroup * _result;
	raw_GetGroup(&_result);
	return _result;
}

inline long  IDUITVItemBase::GetIndex()
{
	long  _result;
	raw_GetIndex(&_result);
	return _result;
}

inline struct IDUIControlBase * IDUITVItemBase::GetCustomObj()
{
	struct IDUIControlBase * _result;
	raw_GetCustomObj(&_result);
	return _result;
}

inline void IDUITVItemBase::SetDefOffset(struct SkinSize  DefSize  )
{

	raw_SetDefOffset(DefSize  );
}

inline struct IDUITVItem * IDUITVItemGroup::InsertItem(long  nIndex, long  nID, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	struct IDUITVItem * _result;
	raw_InsertItem(nIndex, nID, xxx_strText, &_result);
	return _result;
}

inline struct IDUITVItem * IDUITVItemGroup::AppendItem(long  nID, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	struct IDUITVItem * _result;
	raw_AppendItem(nID, xxx_strText, &_result);
	return _result;
}

inline BOOL  IDUITVItemGroup::RemoveItem(struct IDUITVItem * pItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItem(pItem, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITVItemGroup::RemoveItemByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITVItemGroup::RemoveAllItems()
{

	raw_RemoveAllItems();
}

inline struct IDUITVItem * IDUITVItemGroup::GetItem(long  nID  )
{
	struct IDUITVItem * _result;
	raw_GetItem(nID, &_result);
	return _result;
}

inline struct IDUITVItemBase * IDUITVItemGroup::GetAt(long  nIndex  )
{
	struct IDUITVItemBase * _result;
	raw_GetAt(nIndex, &_result);
	return _result;
}

inline long  IDUITVItemGroup::GetCount()
{
	long  _result;
	raw_GetCount(&_result);
	return _result;
}

inline void IDUITVItemGroup::SetExpand(BOOL  bExpand  )
{
	VARIANT_BOOL xxx_bExpand = bExpand ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetExpand(xxx_bExpand  );
}

inline BOOL  IDUITVItemGroup::IsExpand()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsExpand(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITVItemGroup::SetHaveGroup(BOOL  bHaveGroup  )
{
	VARIANT_BOOL xxx_bHaveGroup = bHaveGroup ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHaveGroup(xxx_bHaveGroup  );
}

inline struct IDUITVItemGroup * IDUITVItemGroup::AddGroup(long  nID, tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_AddGroup(nID, xxx_strName, &_result);
	return _result;
}

inline BOOL  IDUITVItemGroup::RemoveGroupByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveGroupByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITVItemGroup::RemoveGroupByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveGroupByName(xxx_strName, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITVItemGroup::RemoveAllGroup()
{

	raw_RemoveAllGroup();
}

inline struct IDUITVItemGroup * IDUITVItemGroup::GetGroupByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_GetGroupByName(xxx_strName, &_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUITVItemGroup::GetGroupByID(long  nID  )
{
	struct IDUITVItemGroup * _result;
	raw_GetGroupByID(nID, &_result);
	return _result;
}

inline BOOL  IDUITVItemGroup::GetHaveGroup()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetHaveGroup(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITVItemGroup::SetGraphics(OLE_HANDLE  hBmp, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphics(hBmp, xxx_bRedraw  );
}

inline OLE_HANDLE  IDUITVItemGroup::GetGraphics()
{
	OLE_HANDLE  _result;
	raw_GetGraphics(&_result);
	return _result;
}

inline struct IDUITVItemGroup * IDUITVItemGroup::InsertGroup(long  nIndex, long  nID, tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITVItemGroup * _result;
	raw_InsertGroup(nIndex, nID, xxx_strName, &_result);
	return _result;
}

inline void IDUITVItemGroup::SetHaveCloseButton(BOOL  bHaveButton  )
{
	VARIANT_BOOL xxx_bHaveButton = bHaveButton ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHaveCloseButton(xxx_bHaveButton  );
}

inline BOOL  IDUITVItemGroup::HaveCloseButton()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_HaveCloseButton(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITVItemGroup::SetTextColor(OLE_COLOR  color  )
{

	raw_SetTextColor(color  );
}

inline void IDUITVItemGroup::SetIcon(struct IDUIImageBase * pImageBase  )
{

	raw_SetIcon(pImageBase  );
}

inline void IDUITVItemGroup::SetGroupHeight(long  nHeight  )
{

	raw_SetGroupHeight(nHeight  );
}

inline long  IDUITVItemGroup::GetGroupHeight()
{
	long  _result;
	raw_GetGroupHeight(&_result);
	return _result;
}

inline void IDUITVItemGroup::SetCheck(short  nCheck  )
{

	raw_SetCheck(nCheck  );
}

inline short  IDUITVItemGroup::GetCheck()
{
	short  _result;
	raw_GetCheck(&_result);
	return _result;
}

inline void IDUITVItemGroup::SetItemEnable(long  nIndex, BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemEnable(nIndex, xxx_bEnable  );
}

inline void IDUITVItemGroup::SetUsePureVirList(BOOL  bUse, long  nMaxCount  )
{
	VARIANT_BOOL xxx_bUse = bUse ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUsePureVirList(xxx_bUse, nMaxCount  );
}

inline void IDUITVItemGroup::ScrollTopOrBottom(BOOL  bTop  )
{
	VARIANT_BOOL xxx_bTop = bTop ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ScrollTopOrBottom(xxx_bTop  );
}

inline void IDUITVItemGroup::ScrollDistance(long  nDistance  )
{

	raw_ScrollDistance(nDistance  );
}

inline long  IDUITVItemGroup::GetCurDistance(BOOL  bTop  )
{
	VARIANT_BOOL xxx_bTop = bTop ? VARIANT_TRUE : VARIANT_FALSE;
	long  _result;
	raw_GetCurDistance(xxx_bTop, &_result);
	return _result;
}

inline BOOL  IDUITVItem::SetGraphics(enum DUILVI_STATE  eState, OLE_HANDLE  hBitmap  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetGraphics(eState, hBitmap, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUITVItem::GetGraphics(enum DUILVI_STATE  eState  )
{
	OLE_HANDLE  _result;
	raw_GetGraphics(eState, &_result);
	return _result;
}

inline void IDUITVItem::SetHeight(long  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHeight(nHeight, xxx_bRedraw  );
}

inline long  IDUITVItem::GetHeight()
{
	long  _result;
	raw_GetHeight(&_result);
	return _result;
}

inline void IDUITVItem::Refresh()
{

	raw_Refresh();
}

inline struct IDUIUnitItem * IDUITVItem::GetUnitItem(long  nCol  )
{
	struct IDUIUnitItem * _result;
	raw_GetUnitItem(nCol, &_result);
	return _result;
}

inline void IDUITVItem::AppendItemText(short  iSubItem, tstring  szItem, tstring  szURL, BOOL  bRedraw  )
{
	_bstr_t xxx_szItem(szItem.c_str());
	_bstr_t xxx_szURL(szURL.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_AppendItemText(iSubItem, xxx_szItem, xxx_szURL, xxx_bRedraw  );
}

inline void IDUITVItem::AppendImage(short  iSubItem, tstring  szImagePath, BOOL  bRedraw  )
{
	_bstr_t xxx_szImagePath(szImagePath.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_AppendImage(iSubItem, xxx_szImagePath, xxx_bRedraw  );
}

inline void IDUITVItem::SetCheck(BOOL  bCheck  )
{
	VARIANT_BOOL xxx_bCheck = bCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCheck(xxx_bCheck  );
}

inline void IDUITVItem::SetWidth(long  nWidth, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetWidth(nWidth, xxx_bRedraw  );
}

inline long  IDUITVItem::GetWidth()
{
	long  _result;
	raw_GetWidth(&_result);
	return _result;
}

inline void IDUITVItem::SetEnable(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnable(xxx_bEnable  );
}

inline BOOL  IDUITVItem::GetEnable()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetEnable(&_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIScrollBar::GetScrollPos()
{
	long  _result;
	raw_GetScrollPos(&_result);
	return _result;
}

inline long  IDUIScrollBar::SetScrollPos(long  nPos, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	long  _result;
	raw_SetScrollPos(nPos, xxx_bRedraw, &_result);
	return _result;
}

inline void IDUIScrollBar::GetScrollRange(long * lpMin, long * lpMax  )
{

	raw_GetScrollRange(lpMin, lpMax  );
}

inline void IDUIScrollBar::SetScrollRange(long  nMin, long  nMax, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetScrollRange(nMin, nMax, xxx_bRedraw  );
}

inline void IDUIScrollBar::ShowScrollBar(BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ShowScrollBar(xxx_bShow  );
}

inline void IDUIScrollBar::EnableScrollBar(BOOL  bEnabled  )
{
	VARIANT_BOOL xxx_bEnabled = bEnabled ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableScrollBar(xxx_bEnabled  );
}

inline BOOL  IDUIScrollBar::SetScrollInfo(struct DUISCROLLINFO * lpScrollInfo, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetScrollInfo(lpScrollInfo, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIScrollBar::GetScrollInfo(struct DUISCROLLINFO * lpScrollInfo, enum DUISB_MASK  sifMask  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetScrollInfo(lpScrollInfo, sifMask, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIScrollBar::GetScrollLimit()
{
	long  _result;
	raw_GetScrollLimit(&_result);
	return _result;
}

inline BOOL  IDUIScrollBar::GetScrollBarInfo(struct DUISCROLLBARINFO * pScrollBarInfo  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetScrollBarInfo(pScrollBarInfo, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIScrollBar::SetBackImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(xxx_bHorz, eState, pImage, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIScrollBar::GetBackImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetBackImage(xxx_bHorz, eState, &_result);
	return _result;
}

inline BOOL  IDUIScrollBar::SetLeftUpImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetLeftUpImage(xxx_bHorz, eState, pImage, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIScrollBar::GetLeftUpImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetLeftUpImage(xxx_bHorz, eState, &_result);
	return _result;
}

inline BOOL  IDUIScrollBar::SetRightDownImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRightDownImage(xxx_bHorz, eState, pImage, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIScrollBar::GetRightDownImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetRightDownImage(xxx_bHorz, eState, &_result);
	return _result;
}

inline BOOL  IDUIScrollBar::SetThumbImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbImage(xxx_bHorz, eState, pImage, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIScrollBar::GetThumbImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetThumbImage(xxx_bHorz, eState, &_result);
	return _result;
}

inline BOOL  IDUIScrollBar::SetThumbTickImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState, struct IDUIImageBase * pImage  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbTickImage(xxx_bHorz, eState, pImage, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIScrollBar::GetThumbTickImage(BOOL  bHorz, enum DUISCOLLBAR_STATE  eState  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetThumbTickImage(xxx_bHorz, eState, &_result);
	return _result;
}

inline void IDUIScrollBar::SetHorz(BOOL  bHorz  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHorz(xxx_bHorz  );
}

inline BOOL  IDUIScrollBar::IsHorz()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsHorz(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIScrollBar::SetPageSize(long  nPageSize  )
{

	raw_SetPageSize(nPageSize  );
}

inline long  IDUIScrollBar::GetPageSize()
{
	long  _result;
	raw_GetPageSize(&_result);
	return _result;
}

inline void IDUIScrollBar::SetOwnerCtrl(struct IDUIControlBase * pOwnerCtrl  )
{

	raw_SetOwnerCtrl(pOwnerCtrl  );
}

inline struct IDUIControlBase * IDUIScrollBar::GetOwnerCtrl()
{
	struct IDUIControlBase * _result;
	raw_GetOwnerCtrl(&_result);
	return _result;
}

inline void IDUIScrollBar::ReDraw()
{

	raw_ReDraw();
}

inline void IDUIScrollBar::SetHorzUpButtonWidth(long  nHorzUpButtonWidth  )
{

	raw_SetHorzUpButtonWidth(nHorzUpButtonWidth  );
}

inline void IDUIScrollBar::SetHorzDownButtonWidth(long  nHorzDownButtonWidth  )
{

	raw_SetHorzDownButtonWidth(nHorzDownButtonWidth  );
}

inline void IDUIScrollBar::SetVertUpButtonHeight(long  nVertUpButtonHeight  )
{

	raw_SetVertUpButtonHeight(nVertUpButtonHeight  );
}

inline void IDUIScrollBar::SetVertDownButtonHeight(long  nVertDownButtonHeight  )
{

	raw_SetVertDownButtonHeight(nVertDownButtonHeight  );
}

inline long  IDUIScrollBar::GetHorzUpButtonWidth()
{
	long  _result;
	raw_GetHorzUpButtonWidth(&_result);
	return _result;
}

inline long  IDUIScrollBar::GetHorzDownButtonWidth()
{
	long  _result;
	raw_GetHorzDownButtonWidth(&_result);
	return _result;
}

inline long  IDUIScrollBar::GetVertUpButtonHeight()
{
	long  _result;
	raw_GetVertUpButtonHeight(&_result);
	return _result;
}

inline long  IDUIScrollBar::GetVertDownButtonHeight()
{
	long  _result;
	raw_GetVertDownButtonHeight(&_result);
	return _result;
}

inline void IDUIScrollBar::SetFadeInOut(BOOL  bFadeInOut  )
{
	VARIANT_BOOL xxx_bFadeInOut = bFadeInOut ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetFadeInOut(xxx_bFadeInOut  );
}

inline BOOL  IDUIScrollBar::GetFadeInOut()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetFadeInOut(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIScrollBar::StartFadeInOut(BOOL  bFadeIn  )
{
	VARIANT_BOOL xxx_bFadeIn = bFadeIn ? VARIANT_TRUE : VARIANT_FALSE;

	raw_StartFadeInOut(xxx_bFadeIn  );
}

inline void IDUIScrollBar::EndFadeInOut()
{

	raw_EndFadeInOut();
}

inline void IDUIScrollBar::SetFadeInOutStep(int  nStep  )
{

	raw_SetFadeInOutStep(nStep  );
}

inline long  IDUIScrollBar::SetScrollPosEvent(long  nPos, BOOL  bRedraw, BOOL  bEvent  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bEvent = bEvent ? VARIANT_TRUE : VARIANT_FALSE;
	long  _result;
	raw_SetScrollPosEvent(nPos, xxx_bRedraw, xxx_bEvent, &_result);
	return _result;
}

inline long  IDUIScrollBar::GetThumbMin()
{
	long  _result;
	raw_GetThumbMin(&_result);
	return _result;
}

inline void IDUIScrollBar::SetThumnMin(long  nMinPos  )
{

	raw_SetThumnMin(nMinPos  );
}

inline BOOL  IDUIMenuBar::SetMenuBarBack(short  nState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetMenuBarBack(nState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIMenuBar::GetMenuBarBack(short  nState  )
{
	struct IDUIImageBase * _result;
	raw_GetMenuBarBack(nState, &_result);
	return _result;
}

inline BOOL  IDUIMenuBar::SetItemImage(enum DUI_MENUBAR_ITEM_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIMenuBar::GetItemImage(enum DUI_MENUBAR_ITEM_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetItemImage(eState, &_result);
	return _result;
}

inline BOOL  IDUIMenuBar::SetItemTextStyle(enum DUI_MENUBAR_ITEM_STATE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTextStyle(eState, pTextStyle, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIMenuBar::GetItemTextStyle(enum DUI_MENUBAR_ITEM_STATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetItemTextStyle(eState, &_result);
	return _result;
}

inline BOOL  IDUIMenuBar::SetItemHeight(long  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemHeight(nHeight, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIMenuBar::GetItemHeight()
{
	long  _result;
	raw_GetItemHeight(&_result);
	return _result;
}

inline BOOL  IDUIMenuBar::SetItemsSapce(long  nSpace, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemsSapce(nSpace, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIMenuBar::GetItemSpace()
{
	long  _result;
	raw_GetItemSpace(&_result);
	return _result;
}

inline BOOL  IDUIMenuBar::SetShowMore(BOOL  bShowMore, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bShowMore = bShowMore ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetShowMore(xxx_bShowMore, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar::GetShowMore()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetShowMore(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar::SetMenuBarHeight(long  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetMenuBarHeight(nHeight, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIMenuBar::GetMenuBarHeight()
{
	long  _result;
	raw_GetMenuBarHeight(&_result);
	return _result;
}

inline BOOL  IDUIMenuBar::LoadMenu(OLE_HANDLE  hMenu  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_LoadMenu(hMenu, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar::AppendItem(OLE_HANDLE  hMenu, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendItem(hMenu, xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar::InsertItem(OLE_HANDLE  hMenu, tstring  strText, short  nIndex  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_InsertItem(hMenu, xxx_strText, nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar::DeleteItem(short  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteItem(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar::ModifyItem(short  nIndex, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ModifyItem(nIndex, xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar::SetShowMoreImage(enum DUI_MENUBAR_ITEM_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetShowMoreImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIMenuBar::GetShowMoreImage(enum DUI_MENUBAR_ITEM_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetShowMoreImage(eState, &_result);
	return _result;
}

inline OLE_HANDLE  IDUIMenuBar::GetMenu()
{
	OLE_HANDLE  _result;
	raw_GetMenu(&_result);
	return _result;
}

inline BOOL  IDUIMenuBar::SetBackDrawColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackDrawColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar::GetBackDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetBackDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMenuBar::SetBackColor(short  nState, struct IFillColor * pColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(nState, pColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIMenuBar::GetBackColor(short  nState  )
{
	struct IFillColor * _result;
	raw_GetBackColor(nState, &_result);
	return _result;
}

inline BOOL  IDUIMenuBar::LoadDUIMenu(IDispatch * pDUIMenu  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_LoadDUIMenu(pDUIMenu, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIMenuBar::GetMenuItemCount()
{
	long  _result;
	raw_GetMenuItemCount(&_result);
	return _result;
}

inline void IDUIProgressbar::SetRange(short  nLower, short  nUpper  )
{

	raw_SetRange(nLower, nUpper  );
}

inline void IDUIProgressbar::GetRange(short * pnLower, short * pnUpper  )
{

	raw_GetRange(pnLower, pnUpper  );
}

inline short  IDUIProgressbar::SetPos(short  nPos  )
{
	short  _result;
	raw_SetPos(nPos, &_result);
	return _result;
}

inline short  IDUIProgressbar::GetPos()
{
	short  _result;
	raw_GetPos(&_result);
	return _result;
}

inline short  IDUIProgressbar::SetStep(short  nStep  )
{
	short  _result;
	raw_SetStep(nStep, &_result);
	return _result;
}

inline short  IDUIProgressbar::StepIt()
{
	short  _result;
	raw_StepIt(&_result);
	return _result;
}

inline short  IDUIProgressbar::OffsetPos(short  nStep  )
{
	short  _result;
	raw_OffsetPos(nStep, &_result);
	return _result;
}

inline BOOL  IDUIProgressbar::IsHorz()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsHorz(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::SetHorz(BOOL  bHorz  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetHorz(xxx_bHorz, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::IsDrawText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawText(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::SetDrawText(BOOL  bDrawText  )
{
	VARIANT_BOOL xxx_bDrawText = bDrawText ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawText(xxx_bDrawText, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::IsDrawBorder()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsDrawBorder(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::IsBorderDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsBorderDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::SetBorderDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderDrawColor(xxx_bDrawColor, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::IsBackDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsBackDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::SetBackDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackDrawColor(xxx_bDrawColor, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::IsClientDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsClientDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::SetClientDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetClientDrawColor(xxx_bDrawColor, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIProgressbar::GetBorderImage()
{
	struct IDUIImageBase * _result;
	raw_GetBorderImage(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetBorderImage(struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderImage(pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIProgressbar::GetBorderColor()
{
	struct IFillColor * _result;
	raw_GetBorderColor(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetBorderColor(struct IFillColor * pColor  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderColor(pColor, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIProgressbar::GetBackImage()
{
	struct IDUIImageBase * _result;
	raw_GetBackImage(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetBackImage(struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIProgressbar::GetBackColor()
{
	struct IFillColor * _result;
	raw_GetBackColor(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetBackColor(struct IFillColor * pColor  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackColor(pColor, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIProgressbar::GetClientImage()
{
	struct IDUIImageBase * _result;
	raw_GetClientImage(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetClientImage(struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetClientImage(pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIProgressbar::GetClientColor()
{
	struct IFillColor * _result;
	raw_GetClientColor(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetClientColor(struct IFillColor * pColor  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetClientColor(pColor, &_result);
	return _result ? TRUE : FALSE;
}

inline unsigned long  IDUIProgressbar::GetBorderWidth()
{
	unsigned long  _result;
	raw_GetBorderWidth(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetBorderWidth(unsigned long  nWidth  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderWidth(nWidth, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIProgressbar::GetClientOffset(unsigned long * Leftoffset, unsigned long * Topoffset, unsigned long * Rightoffset, unsigned long * Bottomoffset  )
{

	raw_GetClientOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset  );
}

inline BOOL  IDUIProgressbar::SetClientOffset(unsigned long  Leftoffset, unsigned long  Topoffset, unsigned long  Rightoffset, unsigned long  Bottomoffset  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetClientOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITextStyle * IDUIProgressbar::GetTextStyle()
{
	struct IDUITextStyle * _result;
	raw_GetTextStyle(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetTextStyle(struct IDUITextStyle * pTextStyle  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextStyle(pTextStyle, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIProgressbar::GetTextFormat()
{
	BSTR _result = NULL;
	raw_GetTextFormat(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUIProgressbar::SetTextFormat(tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextFormat(xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIProgressbar::GetForeImage()
{
	struct IDUIImageBase * _result;
	raw_GetForeImage(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetForeImage(struct IDUIImageBase * pImageBase  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetForeImage(pImageBase, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUIProgressbar::GetForeColor()
{
	struct IFillColor * _result;
	raw_GetForeColor(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetForeColor(struct IFillColor * pColor  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetForeColor(pColor, &_result);
	return _result ? TRUE : FALSE;
}

inline unsigned long  IDUIProgressbar::GetForeWidth()
{
	unsigned long  _result;
	raw_GetForeWidth(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetForeWidth(unsigned long  nWidth  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetForeWidth(nWidth, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::SetClientWidth(unsigned long  nWidth  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetClientWidth(nWidth, &_result);
	return _result ? TRUE : FALSE;
}

inline unsigned long  IDUIProgressbar::GetClientWidth()
{
	unsigned long  _result;
	raw_GetClientWidth(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetSpeed(unsigned long  nSpeed  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSpeed(nSpeed, &_result);
	return _result ? TRUE : FALSE;
}

inline unsigned long  IDUIProgressbar::GetSpeed()
{
	unsigned long  _result;
	raw_GetSpeed(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetElapse(unsigned long  nElapse  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetElapse(nElapse, &_result);
	return _result ? TRUE : FALSE;
}

inline unsigned long  IDUIProgressbar::GetElapse()
{
	unsigned long  _result;
	raw_GetElapse(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::StartAnimate()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_StartAnimate(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::StopAnimate()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_StopAnimate(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::SetRunOnce(BOOL  bRunOnce  )
{
	VARIANT_BOOL xxx_bRunOnce = bRunOnce ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRunOnce(xxx_bRunOnce, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::IsRunOnce()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsRunOnce(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::IsForeDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsForeDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIProgressbar::SetForeDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetForeDrawColor(xxx_bDrawColor, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIProgressbar::GetForeOffset(unsigned long * Leftoffset, unsigned long * Topoffset, unsigned long * Rightoffset, unsigned long * Bottomoffset  )
{

	raw_GetForeOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset  );
}

inline BOOL  IDUIProgressbar::SetForeOffset(unsigned long  Leftoffset, unsigned long  Topoffset, unsigned long  Rightoffset, unsigned long  Bottomoffset  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetForeOffset(Leftoffset, Topoffset, Rightoffset, Bottomoffset, &_result);
	return _result ? TRUE : FALSE;
}

inline enum PROGRESSBAR_STYLE  IDUIProgressbar::GetStyle()
{
	enum PROGRESSBAR_STYLE  _result;
	raw_GetStyle(&_result);
	return _result;
}

inline BOOL  IDUIProgressbar::SetStyle(enum PROGRESSBAR_STYLE  Style  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStyle(Style, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetSliderType(enum DUI_SLIDERCTRLTYPE  eSliderType, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSliderType(eSliderType, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline enum DUI_SLIDERCTRLTYPE  IDUISliderbar::GetSliderType()
{
	enum DUI_SLIDERCTRLTYPE  _result;
	raw_GetSliderType(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetChannelImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetChannelImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar::GetChannelImage()
{
	struct IDUIImageBase * _result;
	raw_GetChannelImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetHorzSliderCtrl(BOOL  bHorz, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetHorzSliderCtrl(xxx_bHorz, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::GetIsHorzSliderCtrl()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsHorzSliderCtrl(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetDrawChannelColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawChannelColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::GetIsDrawChannelColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsDrawChannelColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetChannelBorderColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetChannelBorderColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar::GetChannelBorderColor()
{
	struct IFillColor * _result;
	raw_GetChannelBorderColor(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetChannelColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetChannelColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar::GetChannelColor()
{
	struct IFillColor * _result;
	raw_GetChannelColor(&_result);
	return _result;
}

inline short  IDUISliderbar::GetChannelHeight()
{
	short  _result;
	raw_GetChannelHeight(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetChannelHeight(short  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetChannelHeight(nHeight, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUISliderbar::GetBorderWidth()
{
	short  _result;
	raw_GetBorderWidth(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetBorderWidth(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderWidth(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISliderbar::GetRange(long * pnMin, long * pnMax  )
{

	raw_GetRange(pnMin, pnMax  );
}

inline BOOL  IDUISliderbar::SetRange(long  nMin, long  nMax, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRange(nMin, nMax, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetRangeMin()
{
	long  _result;
	raw_GetRangeMin(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetRangeMin(long  nMin, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRangeMin(nMin, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetRangeMax()
{
	long  _result;
	raw_GetRangeMax(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetRangeMax(long  nMax, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRangeMax(nMax, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetDrawThumbColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawThumbColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::GetIsDrawThumbColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsDrawThumbColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetThumbColor(enum DUI_BUTTONSTATE  eState, struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbColor(eState, pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar::GetThumbColor(enum DUI_BUTTONSTATE  eState  )
{
	struct IFillColor * _result;
	raw_GetThumbColor(eState, &_result);
	return _result;
}

inline short  IDUISliderbar::GetThumbHeight()
{
	short  _result;
	raw_GetThumbHeight(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetThumbHeight(short  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbHeight(nHeight, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUISliderbar::GetThumbWidth()
{
	short  _result;
	raw_GetThumbWidth(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetThumbWidth(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbWidth(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetThumbImage(enum DUI_BUTTONSTATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetThumbImage(eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar::GetThumbImage(enum DUI_BUTTONSTATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetThumbImage(eState, &_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetTooltip(tstring  strTooltip, BOOL  bRedraw  )
{
_bstr_t xxx_strTooltip(strTooltip.c_str());
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTooltip(xxx_strTooltip, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUISliderbar::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUISliderbar::SetPointType(enum DUI_POINTTYPE  eTickType, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetPointType(eTickType, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline enum DUI_POINTTYPE  IDUISliderbar::GetPointType()
{
	enum DUI_POINTTYPE  _result;
	raw_GetPointType(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetTickMarks(BOOL  bTickmarks, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bTickmarks = bTickmarks ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTickMarks(xxx_bTickmarks, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::GetIsTickMarks()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsTickMarks(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetAutoTics(BOOL  bAutoTics, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bAutoTics = bAutoTics ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetAutoTics(xxx_bAutoTics, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::GetIsAutoTics()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsAutoTics(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetTickImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTickImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar::GetTickImage()
{
	struct IDUIImageBase * _result;
	raw_GetTickImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetTickColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTickColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar::GetTickColor()
{
	struct IFillColor * _result;
	raw_GetTickColor(&_result);
	return _result;
}

inline short  IDUISliderbar::GetLineLength()
{
	short  _result;
	raw_GetLineLength(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetLineLength(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetLineLength(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUISliderbar::GetLineWidth()
{
	short  _result;
	raw_GetLineWidth(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetLineWidth(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetLineWidth(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUISliderbar::GetLineSpace()
{
	short  _result;
	raw_GetLineSpace(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetLineSpace(short  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetLineSpace(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetTicFreg()
{
	long  _result;
	raw_GetTicFreg(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetTicFreg(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTicFreg(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetDrawSelColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawSelColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::GetIsDrawSelColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsDrawSelColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetSelectionImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelectionImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar::GetSelectionImage()
{
	struct IDUIImageBase * _result;
	raw_GetSelectionImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetSelectionColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelectionColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar::GetSelectionColor()
{
	struct IFillColor * _result;
	raw_GetSelectionColor(&_result);
	return _result;
}

inline void IDUISliderbar::GetSelection(long * pnMin, long * pnMax  )
{

	raw_GetSelection(pnMin, pnMax  );
}

inline BOOL  IDUISliderbar::SetSelection(long  nMin, long  nMax, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelection(nMin, nMax, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetSelRangeMin()
{
	long  _result;
	raw_GetSelRangeMin(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetSelRangeMin(long  value, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelRangeMin(value, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetSelRangeMax()
{
	long  _result;
	raw_GetSelRangeMax(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetSelRangeMax(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelRangeMax(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetSelectionHeight()
{
	long  _result;
	raw_GetSelectionHeight(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetSelectionHeight(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSelectionHeight(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetVirtualThumb(BOOL  bVirtual, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bVirtual = bVirtual ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetVirtualThumb(xxx_bVirtual, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::GetIsVirtualThumb()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsVirtualThumb(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetVirtualThumbImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetVirtualThumbImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar::GetVirtualThumbImage()
{
	struct IDUIImageBase * _result;
	raw_GetVirtualThumbImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetDrawStateColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawStateColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::GetIsDrawStateColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsDrawStateColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetStateImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar::GetStateImage()
{
	struct IDUIImageBase * _result;
	raw_GetStateImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetStateColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar::GetStateColor()
{
	struct IFillColor * _result;
	raw_GetStateColor(&_result);
	return _result;
}

inline long  IDUISliderbar::GetStateHeight()
{
	long  _result;
	raw_GetStateHeight(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetStateHeight(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateHeight(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISliderbar::GetSpace(long * pnSpaceStart, long * pnSpaceEnd  )
{

	raw_GetSpace(pnSpaceStart, pnSpaceEnd  );
}

inline BOOL  IDUISliderbar::SetSpace(long  nSpaceStart, long  nSpaceEnd, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSpace(nSpaceStart, nSpaceEnd, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetSpaceStart()
{
	long  _result;
	raw_GetSpaceStart(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetSpaceStart(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSpaceStart(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetSpaceEnd()
{
	long  _result;
	raw_GetSpaceEnd(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetSpaceEnd(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSpaceEnd(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISliderbar::GetStateSpace(long * pnSpaceStart, long * pnSpaceEnd  )
{

	raw_GetStateSpace(pnSpaceStart, pnSpaceEnd  );
}

inline BOOL  IDUISliderbar::SetStateSpace(long  nSpaceStart, long  nSpaceEnd, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateSpace(nSpaceStart, nSpaceEnd, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetStateSpaceStart()
{
	long  _result;
	raw_GetStateSpaceStart(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetStateSpaceStart(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateSpaceStart(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetStateSpaceEnd()
{
	long  _result;
	raw_GetStateSpaceEnd(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetStateSpaceEnd(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStateSpaceEnd(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUISliderbar::SetEnableSelecton(BOOL  bEnableSel, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bEnableSel = bEnableSel ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	short  _result;
	raw_SetEnableSelecton(xxx_bEnableSel, xxx_bRedraw, &_result);
	return _result;
}

inline BOOL  IDUISliderbar::GetIsEnableSelecton()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsEnableSelecton(&_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetPos()
{
	long  _result;
	raw_GetPos(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetPos(long  nPos  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetPos(nPos, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetTic(long  nTic  )
{
	long  _result;
	raw_GetTic(nTic, &_result);
	return _result;
}

inline long  IDUISliderbar::GetTicPos(long  nTic  )
{
	long  _result;
	raw_GetTicPos(nTic, &_result);
	return _result;
}

inline long  IDUISliderbar::GetTicArray()
{
	long  _result;
	raw_GetTicArray(&_result);
	return _result;
}

inline long  IDUISliderbar::GetNumTics()
{
	long  _result;
	raw_GetNumTics(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetTic(long  nTic  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTic(nTic, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::ClearTics(BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ClearTics(xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::ClearSel(BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ClearSel(xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::SetLineSize(long  nSize  )
{
	long  _result;
	raw_SetLineSize(nSize, &_result);
	return _result;
}

inline long  IDUISliderbar::GetLineSize()
{
	long  _result;
	raw_GetLineSize(&_result);
	return _result;
}

inline long  IDUISliderbar::SetPageSize(long  nSize  )
{
	long  _result;
	raw_SetPageSize(nSize, &_result);
	return _result;
}

inline long  IDUISliderbar::GetPageSize()
{
	long  _result;
	raw_GetPageSize(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetDrawFrontColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawFrontColor(xxx_bDrawColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::GetIsDrawFrontColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsDrawFrontColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetFrontImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetFrontImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISliderbar::GetFrontImage()
{
	struct IDUIImageBase * _result;
	raw_GetFrontImage(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetFrontColor(struct IFillColor * pFillColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetFrontColor(pFillColor, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IFillColor * IDUISliderbar::GetFrontColor()
{
	struct IFillColor * _result;
	raw_GetFrontColor(&_result);
	return _result;
}

inline long  IDUISliderbar::GetFrontHeight()
{
	long  _result;
	raw_GetFrontHeight(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetFrontHeight(long  nValue, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetFrontHeight(nValue, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISliderbar::GetStatePos()
{
	long  _result;
	raw_GetStatePos(&_result);
	return _result;
}

inline BOOL  IDUISliderbar::SetStatePos(long  nPos  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetStatePos(nPos, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::SetEnabledState(BOOL  bEnabled, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bEnabled = bEnabled ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetEnabledState(xxx_bEnabled, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::GetIsEnabledState()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsEnabledState(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISliderbar::IsStepProgress()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsStepProgress(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISliderbar::SetStepProgress(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetStepProgress(xxx_bEnable  );
}

inline BOOL  IDUISpin::SetSpinMode(BOOL  bHorz, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSpinMode(xxx_bHorz, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISpin::GetSpinMode()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetSpinMode(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISpin::SetButtonImage(BOOL  bUpBtn, enum DUI_SPIN_BUTTON_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bUpBtn = bUpBtn ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetButtonImage(xxx_bUpBtn, eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISpin::GetButtonImage(BOOL  bUpBtn, enum DUI_SPIN_BUTTON_STATE  eState  )
{
	VARIANT_BOOL xxx_bUpBtn = bUpBtn ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetButtonImage(xxx_bUpBtn, eState, &_result);
	return _result;
}

inline BOOL  IDUISpin::SetButtonGraphics(BOOL  bUpBtn, enum DUI_SPIN_BUTTON_STATE  eState, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bUpBtn = bUpBtn ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetButtonGraphics(xxx_bUpBtn, eState, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUISpin::GetButtonGraphics(BOOL  bUpBtn, enum DUI_SPIN_BUTTON_STATE  eState  )
{
	VARIANT_BOOL xxx_bUpBtn = bUpBtn ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIImageBase * _result;
	raw_GetButtonGraphics(xxx_bUpBtn, eState, &_result);
	return _result;
}

inline BOOL  IDUISpin::SetRange(long  nMinVal, long  nMaxVal  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetRange(nMinVal, nMaxVal, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISpin::GetRange(long * pnMinVal, long * pnMaxVal  )
{

	raw_GetRange(pnMinVal, pnMaxVal  );
}

inline BOOL  IDUISpin::SetMinVal(long  nMinVal  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetMinVal(nMinVal, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISpin::GetMinVal()
{
	long  _result;
	raw_GetMinVal(&_result);
	return _result;
}

inline BOOL  IDUISpin::SetMaxVal(long  nMaxVal  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetMaxVal(nMaxVal, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISpin::GetMaxVal()
{
	long  _result;
	raw_GetMaxVal(&_result);
	return _result;
}

inline BOOL  IDUISpin::SetAccel(long  nAccel  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetAccel(nAccel, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUISpin::GetAccel()
{
	long  _result;
	raw_GetAccel(&_result);
	return _result;
}

inline BOOL  IDUISpin::SetWrap(BOOL  bWrap  )
{
	VARIANT_BOOL xxx_bWrap = bWrap ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetWrap(xxx_bWrap, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISpin::GetIsWrap()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsWrap(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISpin::SetBuddyInteger(BOOL  bInteger  )
{
	VARIANT_BOOL xxx_bInteger = bInteger ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBuddyInteger(xxx_bInteger, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISpin::GetBuddyInteger()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetBuddyInteger(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISpin::SetBuddy(struct IDUIControlBase * pDUICtrl  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBuddy(pDUICtrl, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIControlBase * IDUISpin::GetBuddy()
{
	struct IDUIControlBase * _result;
	raw_GetBuddy(&_result);
	return _result;
}

inline BOOL  IDUISpin::SetPos(int  nPos  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetPos(nPos, &_result);
	return _result ? TRUE : FALSE;
}

inline int  IDUISpin::GetPos()
{
	int  _result;
	raw_GetPos(&_result);
	return _result;
}

inline BOOL  IDUISpin::SetBase(BOOL  bHex  )
{
	VARIANT_BOOL xxx_bHex = bHex ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBase(xxx_bHex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUISpin::GetBase()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetBase(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISplitter::SetSplitterType(BOOL  bHorz  )
{
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSplitterType(xxx_bHorz  );
}

inline void IDUISplitter::SetSplitterHorzMin(long  nTopMin, long  nBottomMin  )
{

	raw_SetSplitterHorzMin(nTopMin, nBottomMin  );
}

inline void IDUISplitter::SetSplitterVertMin(long  nLeftMin, long  nRightMin  )
{

	raw_SetSplitterVertMin(nLeftMin, nRightMin  );
}

inline long  IDUISplitter::GetTopLeftMin()
{
	long  _result;
	raw_GetTopLeftMin(&_result);
	return _result;
}

inline long  IDUISplitter::GetBottomRightMin()
{
	long  _result;
	raw_GetBottomRightMin(&_result);
	return _result;
}

inline long  IDUISplitter::GetGraphLength()
{
	long  _result;
	raw_GetGraphLength(&_result);
	return _result;
}

inline void IDUISplitter::SetGraphLength(long  nGraphLength, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphLength(nGraphLength, xxx_bRedraw  );
}

inline void IDUISplitter::SetBarPressColor(OLE_COLOR  clrPress  )
{

	raw_SetBarPressColor(clrPress  );
}

inline void IDUIStatic::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUIStatic::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline enum DUI_STATICSTATE  IDUIStatic::GetStaticState()
{
	enum DUI_STATICSTATE  _result;
	raw_GetStaticState(&_result);
	return _result;
}

inline void IDUIStatic::SetStaticState(enum DUI_STATICSTATE  eState  )
{

	raw_SetStaticState(eState  );
}

inline void IDUIStatic::SetBackImageSec(enum DUI_STATICSTATE  eState, struct IDUIImageBase * pImageBase  )
{

	raw_SetBackImageSec(eState, pImageBase  );
}

inline struct IDUIImageBase * IDUIStatic::GetBackImageSec(enum DUI_STATICSTATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetBackImageSec(eState, &_result);
	return _result;
}

inline void IDUIStatic::SetBackColor(enum DUI_STATICSTATE  eState, struct IFillColor * pFillColor  )
{

	raw_SetBackColor(eState, pFillColor  );
}

inline struct IFillColor * IDUIStatic::GetBackColor(enum DUI_STATICSTATE  eState  )
{
	struct IFillColor * _result;
	raw_GetBackColor(eState, &_result);
	return _result;
}

inline void IDUIStatic::SetTextStyle(enum DUI_STATICSTATE  eState, struct IDUITextStyle * pTextStyle  )
{

	raw_SetTextStyle(eState, pTextStyle  );
}

inline struct IDUITextStyle * IDUIStatic::GetTextStyle(enum DUI_STATICSTATE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetTextStyle(eState, &_result);
	return _result;
}

inline void IDUIStatic::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  IDUIStatic::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUIStatic::StartScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_StartScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIStatic::AddScrollItem(tstring  strText, tstring  strURL  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strURL(strURL.c_str());
	OLE_HANDLE  _result;
	raw_AddScrollItem(xxx_strText, xxx_strURL, &_result);
	return _result;
}

inline BOOL  IDUIStatic::SetTextScroll(BOOL  bIsScroll, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bIsScroll = bIsScroll ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetTextScroll(xxx_bIsScroll, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::GetTextScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetTextScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::SetScrollSpace(long  nSpace  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetScrollSpace(nSpace, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIStatic::GetScrollSpace()
{
	long  _result;
	raw_GetScrollSpace(&_result);
	return _result;
}

inline BOOL  IDUIStatic::SetScrollSpeed(long  nSpeed  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetScrollSpeed(nSpeed, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIStatic::GetScrollSpeed()
{
	long  _result;
	raw_GetScrollSpeed(&_result);
	return _result;
}

inline BOOL  IDUIStatic::SetScrollStep(long  nStep  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetScrollStep(nStep, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIStatic::GetScrollStep()
{
	long  _result;
	raw_GetScrollStep(&_result);
	return _result;
}

inline BOOL  IDUIStatic::DeleteScrollItem(OLE_HANDLE  hTextItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteScrollItem(hTextItem, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::ModifyScrollItem(OLE_HANDLE  hTextItem, tstring  strText, tstring  strNewURL  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strNewURL(strNewURL.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ModifyScrollItem(hTextItem, xxx_strText, xxx_strNewURL, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::DeleteAllScrollItem()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteAllScrollItem(&_result);
	return _result ? TRUE : FALSE;
}

inline short  IDUIStatic::GetScrollTextsCount()
{
	short  _result;
	raw_GetScrollTextsCount(&_result);
	return _result;
}

inline BOOL  IDUIStatic::SetHyperlink(BOOL  bIsHyperlink, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bIsHyperlink = bIsHyperlink ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetHyperlink(xxx_bIsHyperlink, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::GetIsHyperlink()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetIsHyperlink(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIStatic::SetHyperlinkTextStyle(enum DUI_HYPERLINKTEXTSTYLE  eState, struct IDUITextStyle * pTextStyle, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHyperlinkTextStyle(eState, pTextStyle, xxx_bRedraw  );
}

inline struct IDUITextStyle * IDUIStatic::GetHyperlinkTextStyle(enum DUI_HYPERLINKTEXTSTYLE  eState  )
{
	struct IDUITextStyle * _result;
	raw_GetHyperlinkTextStyle(eState, &_result);
	return _result;
}

inline BOOL  IDUIStatic::SetDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetDrawColor(xxx_bDrawColor, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::GetDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::ModifyScrollText(OLE_HANDLE  hTextItem, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ModifyScrollText(hTextItem, xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::ModifyScrollURL(OLE_HANDLE  hTextItem, tstring  strNewURL  )
{
_bstr_t xxx_strNewURL(strNewURL.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ModifyScrollURL(hTextItem, xxx_strNewURL, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::SetURL(tstring  strURL  )
{
_bstr_t xxx_strURL(strURL.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetURL(xxx_strURL, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIStatic::GetURL()
{
	BSTR _result = NULL;
	raw_GetURL(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline tstring  IDUIStatic::GetScrollText(OLE_HANDLE  hTextItem  )
{
	BSTR _result = NULL;
	raw_GetScrollText(hTextItem, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline tstring  IDUIStatic::GetScrollURL(OLE_HANDLE  hTextItem  )
{
	BSTR _result = NULL;
	raw_GetScrollURL(hTextItem, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIStatic::SetImageByPath(tstring  strImagePath, short  nFrames, BOOL  bHorz  )
{
	_bstr_t xxx_strImagePath(strImagePath.c_str());
	VARIANT_BOOL xxx_bHorz = bHorz ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetImageByPath(xxx_strImagePath, nFrames, xxx_bHorz  );
}

inline tstring  IDUIStatic::GetImagePath()
{
	BSTR _result = NULL;
	raw_GetImagePath(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIStatic::SetImageBack(OLE_HANDLE  hBmp, enum DUI_STATICSTATE  eState  )
{

	raw_SetImageBack(hBmp, eState  );
}

inline OLE_HANDLE  IDUIStatic::GetImageBack(enum DUI_STATICSTATE  eState  )
{
	OLE_HANDLE  _result;
	raw_GetImageBack(eState, &_result);
	return _result;
}

inline void IDUIStatic::GetAutoResize(VARIANT_BOOL * bAbleResize, unsigned long * nMinHeight, unsigned long * nMaxHeight, unsigned long * nMinWidth, unsigned long * nMaxWidth  )
{

	raw_GetAutoResize(bAbleResize, nMinHeight, nMaxHeight, nMinWidth, nMaxWidth  );
}

inline void IDUIStatic::SetAutoResize(BOOL  bAbleAutosize, unsigned long  nMinHeight, unsigned long  nMaxHeight, unsigned long  nMinWidth, unsigned long  nMaxWidth  )
{
	VARIANT_BOOL xxx_bAbleAutosize = bAbleAutosize ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoResize(xxx_bAbleAutosize, nMinHeight, nMaxHeight, nMinWidth, nMaxWidth  );
}

inline BOOL  IDUIStatic::PauseScroll(BOOL  bPause  )
{
	VARIANT_BOOL xxx_bPause = bPause ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_PauseScroll(xxx_bPause, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIStatic::SetWordType(enum DUI_ENUM_WORDTYPE  eWordType  )
{

	raw_SetWordType(eWordType  );
}

inline enum DUI_ENUM_WORDTYPE  IDUIStatic::GetWordType()
{
	enum DUI_ENUM_WORDTYPE  _result;
	raw_GetWordType(&_result);
	return _result;
}

inline void IDUIStatic::EnableGetWord()
{

	raw_EnableGetWord();
}

inline void IDUIStatic::DisableGetWord()
{

	raw_DisableGetWord();
}

inline void IDUIStatic::SetSplitWord(tstring  strSplit  )
{
	_bstr_t xxx_strSplit(strSplit.c_str());

	raw_SetSplitWord(xxx_strSplit  );
}

inline void IDUIStatic::GetSplitWord(BSTR * strSplit  )
{

	raw_GetSplitWord(strSplit  );
}

inline void IDUIStatic::AppendSubScrollText(OLE_HANDLE  hTextItem, tstring  strText, struct IDUITextStyle * ppTextStyle  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_AppendSubScrollText(hTextItem, xxx_strText, ppTextStyle  );
}

inline void IDUIStatic::ClearVScrollText()
{

	raw_ClearVScrollText();
}

inline void IDUIStatic::AppendVScrollText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_AppendVScrollText(xxx_strText  );
}

inline BOOL  IDUIStatic::StartVScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_StartVScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::StopVScroll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_StopVScroll(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIStatic::SetVWaitTime(long  nTime  )
{

	raw_SetVWaitTime(nTime  );
}

inline BOOL  IDUIStatic::SetVInterval(long  nInterval  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetVInterval(nInterval, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::SetVMoveTop(BOOL  bTop  )
{
	VARIANT_BOOL xxx_bTop = bTop ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetVMoveTop(xxx_bTop, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::AppendSubString(tstring  strText, struct IDUITextStyle * pTextStyle  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_AppendSubString(xxx_strText, pTextStyle, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::ChangeSubStringStyle(tstring  strText, struct IDUITextStyle * pTextStyle  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ChangeSubStringStyle(xxx_strText, pTextStyle, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStatic::DeleteAllSubString()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteAllSubString(&_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITabCtrlItem * IDUITabCtrl::AppendItem(tstring  strName, long  nID, tstring  strText  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	struct IDUITabCtrlItem * _result;
	raw_AppendItem(xxx_strName, nID, xxx_strText, &_result);
	return _result;
}

inline struct IDUITabCtrlItem * IDUITabCtrl::InsertItem(short  nIndex, tstring  strName, long  nID, tstring  strText  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	struct IDUITabCtrlItem * _result;
	raw_InsertItem(nIndex, xxx_strName, nID, xxx_strText, &_result);
	return _result;
}

inline struct IDUITabCtrlItem * IDUITabCtrl::GetItemByIndex(short  nIndex  )
{
	struct IDUITabCtrlItem * _result;
	raw_GetItemByIndex(nIndex, &_result);
	return _result;
}

inline struct IDUITabCtrlItem * IDUITabCtrl::GetItemByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITabCtrlItem * _result;
	raw_GetItemByName(xxx_strName, &_result);
	return _result;
}

inline struct IDUITabCtrlItem * IDUITabCtrl::GetItemByID(long  nID  )
{
	struct IDUITabCtrlItem * _result;
	raw_GetItemByID(nID, &_result);
	return _result;
}

inline long  IDUITabCtrl::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline BOOL  IDUITabCtrl::RemoveItem(struct IDUITabCtrlItem * pItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItem(pItem, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITabCtrl::RemoveItemByIndex(short  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByIndex(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITabCtrl::RemoveItemByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByName(xxx_strName, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITabCtrl::RemoveItemByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrl::RemoveAllItems()
{

	raw_RemoveAllItems();
}

inline struct IDUITabButton * IDUITabCtrl::AppendButton(tstring  strName, long  nID, tstring  strText  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	struct IDUITabButton * _result;
	raw_AppendButton(xxx_strName, nID, xxx_strText, &_result);
	return _result;
}

inline struct IDUITabButton * IDUITabCtrl::InsertButton(short  nIndex, tstring  strName, long  nID, tstring  strText  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	struct IDUITabButton * _result;
	raw_InsertButton(nIndex, xxx_strName, nID, xxx_strText, &_result);
	return _result;
}

inline struct IDUITabButton * IDUITabCtrl::GetButtonByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	struct IDUITabButton * _result;
	raw_GetButtonByName(xxx_strName, &_result);
	return _result;
}

inline struct IDUITabButton * IDUITabCtrl::GetButtonByID(long  nID  )
{
	struct IDUITabButton * _result;
	raw_GetButtonByID(nID, &_result);
	return _result;
}

inline struct IDUITabButton * IDUITabCtrl::GetPreDefineBtnByID(enum DUITABCTRL_BTN_ID  nID  )
{
	struct IDUITabButton * _result;
	raw_GetPreDefineBtnByID(nID, &_result);
	return _result;
}

inline long  IDUITabCtrl::GetButtonCount()
{
	long  _result;
	raw_GetButtonCount(&_result);
	return _result;
}

inline BOOL  IDUITabCtrl::RemoveButton(struct IDUITabButton * pButton  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveButton(pButton, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITabCtrl::RemoveButtonByName(tstring  strName  )
{
_bstr_t xxx_strName(strName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveButtonByName(xxx_strName, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUITabCtrl::RemoveButtonByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveButtonByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrl::RemoveAllButtons()
{

	raw_RemoveAllButtons();
}

inline void IDUITabCtrl::SetScrollPerStep(short  nScroll  )
{

	raw_SetScrollPerStep(nScroll  );
}

inline short  IDUITabCtrl::GetScrollPerStep()
{
	short  _result;
	raw_GetScrollPerStep(&_result);
	return _result;
}

inline void IDUITabCtrl::SetSelectedItem(short  nIndex  )
{

	raw_SetSelectedItem(nIndex  );
}

inline short  IDUITabCtrl::GetSelectedItem()
{
	short  _result;
	raw_GetSelectedItem(&_result);
	return _result;
}

inline void IDUITabCtrl::SetControlID(short  nIndex  )
{

	raw_SetControlID(nIndex  );
}

inline short  IDUITabCtrl::GetControlID()
{
	short  _result;
	raw_GetControlID(&_result);
	return _result;
}

inline struct SkinRect  IDUITabCtrl::GetItemsRect()
{
	struct SkinRect  _result;
	raw_GetItemsRect(&_result);
	return _result;
}

inline void IDUITabCtrl::EnableItem(long  nIdIndex, BOOL  bEnable, BOOL  bByIndex  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bByIndex = bByIndex ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableItem(nIdIndex, xxx_bEnable, xxx_bByIndex  );
}

inline BOOL  IDUITabCtrl::IsEnableItem(long  nIdIndex, BOOL  bByIndex  )
{
	VARIANT_BOOL xxx_bByIndex = bByIndex ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsEnableItem(nIdIndex, xxx_bByIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrl::SetItemHaveCloseButton(BOOL  bHaveButton, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bHaveButton = bHaveButton ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemHaveCloseButton(xxx_bHaveButton, xxx_bRedraw  );
}

inline BOOL  IDUITabCtrl::IsItemHaveCloseButton()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsItemHaveCloseButton(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrl::SetDragable(BOOL  bDragable  )
{
	VARIANT_BOOL xxx_bDragable = bDragable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDragable(xxx_bDragable  );
}

inline void IDUITabCtrl::SwapItem(struct IDUITabCtrlItem * pFirst, struct IDUITabCtrlItem * pSecond  )
{

	raw_SwapItem(pFirst, pSecond  );
}

inline void IDUITabCtrl::SetSelShowCloseButton(BOOL  bHaveButton, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bHaveButton = bHaveButton ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSelShowCloseButton(xxx_bHaveButton, xxx_bRedraw  );
}

inline BOOL  IDUITabCtrl::IsSelShowCloseButton()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsSelShowCloseButton(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrlItem::SetName(tstring  strName  )
{
	_bstr_t xxx_strName(strName.c_str());

	raw_SetName(xxx_strName  );
}

inline tstring  IDUITabCtrlItem::GetName()
{
	BSTR _result = NULL;
	raw_GetName(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITabCtrlItem::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUITabCtrlItem::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITabCtrlItem::SetID(long  nID  )
{

	raw_SetID(nID  );
}

inline long  IDUITabCtrlItem::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline void IDUITabCtrlItem::SetTooltip(tstring  strTipText  )
{
	_bstr_t xxx_strTipText(strTipText.c_str());

	raw_SetTooltip(xxx_strTipText  );
}

inline tstring  IDUITabCtrlItem::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITabCtrlItem::SetVisible(BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetVisible(xxx_bVisible  );
}

inline BOOL  IDUITabCtrlItem::IsVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrlItem::SetStatus(enum DUITABITEM_STATE  eStatus  )
{

	raw_SetStatus(eStatus  );
}

inline struct SkinRect  IDUITabCtrlItem::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline void IDUITabCtrlItem::SetGraphic(OLE_HANDLE  hBitmap, enum DUITABITEM_STATE  eState  )
{

	raw_SetGraphic(hBitmap, eState  );
}

inline OLE_HANDLE  IDUITabCtrlItem::GetGraphic()
{
	OLE_HANDLE  _result;
	raw_GetGraphic(&_result);
	return _result;
}

inline void IDUITabCtrlItem::SetIconFilePath(tstring  sFilePath  )
{
	_bstr_t xxx_sFilePath(sFilePath.c_str());

	raw_SetIconFilePath(xxx_sFilePath  );
}

inline tstring  IDUITabCtrlItem::GetIconFilePath()
{
	BSTR _result = NULL;
	raw_GetIconFilePath(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITabCtrlItem::SetIcon(OLE_HANDLE  hIcon  )
{

	raw_SetIcon(hIcon  );
}

inline OLE_HANDLE  IDUITabCtrlItem::GetIcon()
{
	OLE_HANDLE  _result;
	raw_GetIcon(&_result);
	return _result;
}

inline void IDUITabCtrlItem::SetCustomBack(struct IDUIImageBase * pDUIImageBase, enum DUITABITEM_STATE  eState, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCustomBack(pDUIImageBase, eState, xxx_bRedraw  );
}

inline struct IDUIImageBase * IDUITabCtrlItem::GetCustomBack(enum DUITABITEM_STATE  eState  )
{
	struct IDUIImageBase * _result;
	raw_GetCustomBack(eState, &_result);
	return _result;
}

inline long  IDUITabCtrlItem::GetIndex()
{
	long  _result;
	raw_GetIndex(&_result);
	return _result;
}

inline void IDUITabCtrlItem::SetHaveCloseButton(BOOL  bHaveButton, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bHaveButton = bHaveButton ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHaveCloseButton(xxx_bHaveButton, xxx_bRedraw  );
}

inline BOOL  IDUITabCtrlItem::IsHaveCloseButton()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsHaveCloseButton(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabCtrlItem::SetWidth(long  nWidth, BOOL  bReCalc  )
{
	VARIANT_BOOL xxx_bReCalc = bReCalc ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetWidth(nWidth, xxx_bReCalc  );
}

inline long  IDUITabCtrlItem::GetWidth()
{
	long  _result;
	raw_GetWidth(&_result);
	return _result;
}

inline void IDUITabButton::SetName(tstring  strName  )
{
	_bstr_t xxx_strName(strName.c_str());

	raw_SetName(xxx_strName  );
}

inline tstring  IDUITabButton::GetName()
{
	BSTR _result = NULL;
	raw_GetName(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITabButton::SetID(long  nID  )
{

	raw_SetID(nID  );
}

inline long  IDUITabButton::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline void IDUITabButton::SetTooltip(tstring  strTipText  )
{
	_bstr_t xxx_strTipText(strTipText.c_str());

	raw_SetTooltip(xxx_strTipText  );
}

inline tstring  IDUITabButton::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITabButton::SetVisible(BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetVisible(xxx_bVisible  );
}

inline BOOL  IDUITabButton::IsVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITabButton::SetStatus(enum DUITABITEM_STATE  eStatus  )
{

	raw_SetStatus(eStatus  );
}

inline struct SkinRect  IDUITabButton::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline void IDUITabButton::SetSize(struct SkinSize  sz  )
{

	raw_SetSize(sz  );
}

inline struct SkinSize  IDUITabButton::GetSize()
{
	struct SkinSize  _result;
	raw_GetSize(&_result);
	return _result;
}

inline void IDUITabButton::SetOffset(struct SkinSize  sz  )
{

	raw_SetOffset(sz  );
}

inline struct SkinSize  IDUITabButton::GetOffset()
{
	struct SkinSize  _result;
	raw_GetOffset(&_result);
	return _result;
}

inline void IDUITabButton::SetSpaceWithBlind(short  nSpace  )
{

	raw_SetSpaceWithBlind(nSpace  );
}

inline short  IDUITabButton::GetSpaceWithBlind()
{
	short  _result;
	raw_GetSpaceWithBlind(&_result);
	return _result;
}

inline struct IDUIToolBarItemBase * IDUIToolBar::InsertItem(short  nIndex, long  nID, tstring  strText, long  nGroupID, enum DUI_TBITEM_STYLE  eStyle, tstring  strTooltip  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strTooltip(strTooltip.c_str());
	struct IDUIToolBarItemBase * _result;
	raw_InsertItem(nIndex, nID, xxx_strText, nGroupID, eStyle, xxx_strTooltip, &_result);
	return _result;
}

inline struct IDUIToolBarItemBase * IDUIToolBar::AppendItem(long  nID, tstring  strText, long  nGroupID, enum DUI_TBITEM_STYLE  eStyle, tstring  strTooltip  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strTooltip(strTooltip.c_str());
	struct IDUIToolBarItemBase * _result;
	raw_AppendItem(nID, xxx_strText, nGroupID, eStyle, xxx_strTooltip, &_result);
	return _result;
}

inline BOOL  IDUIToolBar::RemoveItemByID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIToolBar::RemoveItemByIndex(short  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveItemByIndex(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBar::RemoveAllItems()
{

	raw_RemoveAllItems();
}

inline struct IDUIToolBarItemBase * IDUIToolBar::GetItem(long  nID  )
{
	struct IDUIToolBarItemBase * _result;
	raw_GetItem(nID, &_result);
	return _result;
}

inline struct IDUIToolBarItemBase * IDUIToolBar::GetAt(short  nIndex  )
{
	struct IDUIToolBarItemBase * _result;
	raw_GetAt(nIndex, &_result);
	return _result;
}

inline long  IDUIToolBar::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline struct IDUIToolBarMoreButton * IDUIToolBar::GetMoreButton()
{
	struct IDUIToolBarMoreButton * _result;
	raw_GetMoreButton(&_result);
	return _result;
}

inline struct IDUIToolBarItemBase * IDUIToolBar::GetItemByStyle(enum DUI_TBITEM_STYLE  eStyle, long  nID  )
{
	struct IDUIToolBarItemBase * _result;
	raw_GetItemByStyle(eStyle, nID, &_result);
	return _result;
}

inline void IDUIToolBar::SetAutoSize(BOOL  bAutoSize, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bAutoSize = bAutoSize ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoSize(xxx_bAutoSize, xxx_bRedraw  );
}

inline BOOL  IDUIToolBar::IsAutoSize()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoSize(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBar::SetShowText(BOOL  bShowText, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bShowText = bShowText ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowText(xxx_bShowText, xxx_bRedraw  );
}

inline BOOL  IDUIToolBar::IsShowText()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsShowText(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBar::SetItemHeight(long  nHeight, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemHeight(nHeight, xxx_bRedraw  );
}

inline long  IDUIToolBar::GetItemHeight()
{
	long  _result;
	raw_GetItemHeight(&_result);
	return _result;
}

inline void IDUIToolBar::SetItemWidth(long  nWidth, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemWidth(nWidth, xxx_bRedraw  );
}

inline long  IDUIToolBar::GetItemWidth()
{
	long  _result;
	raw_GetItemWidth(&_result);
	return _result;
}

inline void IDUIToolBar::SetItemSpace(long  nSpace, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemSpace(nSpace, xxx_bRedraw  );
}

inline long  IDUIToolBar::GetItemSpace()
{
	long  _result;
	raw_GetItemSpace(&_result);
	return _result;
}

inline void IDUIToolBar::SetIconSize(struct SkinSize  size, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetIconSize(size, xxx_bRedraw  );
}

inline struct SkinSize  IDUIToolBar::GetIconSize()
{
	struct SkinSize  _result;
	raw_GetIconSize(&_result);
	return _result;
}

inline BOOL  IDUIToolBar::CancelGroupRadio(long  nGnGroupID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_CancelGroupRadio(nGnGroupID, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIToolBarItemBase::SetID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIToolBarItemBase::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline void IDUIToolBarItemBase::SetSize(int  nWidth, int  nHeight  )
{

	raw_SetSize(nWidth, nHeight  );
}

inline void IDUIToolBarItemBase::GetSize(int * nWidth, int * nHeight  )
{

	raw_GetSize(nWidth, nHeight  );
}

inline enum DUI_TBITEM_STYLE  IDUIToolBarItemBase::GetStyle()
{
	enum DUI_TBITEM_STYLE  _result;
	raw_GetStyle(&_result);
	return _result;
}

inline void IDUIToolBarItemBase::SetObjPtr(OLE_HANDLE  pObjPtr  )
{

	raw_SetObjPtr(pObjPtr  );
}

inline void IDUIToolBarMoreButton::SetSize(int  nWidth, int  nHeight  )
{

	raw_SetSize(nWidth, nHeight  );
}

inline void IDUIToolBarMoreButton::GetSize(int * nWidth, int * nHeight  )
{

	raw_GetSize(nWidth, nHeight  );
}

inline void IDUIToolBarMoreButton::SetVisible(BOOL  bVisible, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetVisible(xxx_bVisible, xxx_bRedraw  );
}

inline BOOL  IDUIToolBarMoreButton::IsVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBarMoreButton::SetState(enum DUI_TBITEM_STATE  eState  )
{

	raw_SetState(eState  );
}

inline enum DUI_TBITEM_STATE  IDUIToolBarMoreButton::GetState()
{
	enum DUI_TBITEM_STATE  _result;
	raw_GetState(&_result);
	return _result;
}

inline BOOL  IDUIToolBarButton::SetText(tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetText(xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIToolBarButton::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIToolBarButton::SetData(OLE_HANDLE  hData  )
{

	raw_SetData(hData  );
}

inline OLE_HANDLE  IDUIToolBarButton::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline void IDUIToolBarButton::SetGraphic(OLE_HANDLE  hBmp, BOOL  bIcon  )
{
	VARIANT_BOOL xxx_bIcon = bIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphic(hBmp, xxx_bIcon  );
}

inline OLE_HANDLE  IDUIToolBarButton::GetGraphic()
{
	OLE_HANDLE  _result;
	raw_GetGraphic(&_result);
	return _result;
}

inline void IDUIToolBarButton::SetState(enum DUI_TBITEM_STATE  eState, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetState(eState, xxx_bRedraw  );
}

inline enum DUI_TBITEM_STATE  IDUIToolBarButton::GetState()
{
	enum DUI_TBITEM_STATE  _result;
	raw_GetState(&_result);
	return _result;
}

inline void IDUIToolBarButton::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  IDUIToolBarButton::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIToolBarButton::SetDisableGraphic(OLE_HANDLE  hBmp, BOOL  bIcon  )
{
	VARIANT_BOOL xxx_bIcon = bIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDisableGraphic(hBmp, xxx_bIcon  );
}

inline struct SkinRect  IDUIToolBarButton::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline void IDUIToolBarCheckButton::SetCheck(BOOL  bCheck  )
{
	VARIANT_BOOL xxx_bCheck = bCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCheck(xxx_bCheck  );
}

inline BOOL  IDUIToolBarCheckButton::GetCheck()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetCheck(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBarRadioButton::SetGroupID(long  nID  )
{

	raw_SetGroupID(nID  );
}

inline long  IDUIToolBarRadioButton::GetGroupID()
{
	long  _result;
	raw_GetGroupID(&_result);
	return _result;
}

inline void IDUIToolBarRadioButton::SetRadio()
{

	raw_SetRadio();
}

inline BOOL  IDUIToolBarRadioButton::GetValue()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetValue(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIToolBarRadioButton::CancelGroupRadio()
{

	raw_CancelGroupRadio();
}

inline BOOL  IDUIToolBarPushExButton::SetID(long  nID  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetID(nID, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIToolBarPushExButton::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetSize(int  nWidth, int  nHeight  )
{

	raw_SetSize(nWidth, nHeight  );
}

inline void IDUIToolBarPushExButton::GetSize(int * nWidth, int * nHeight  )
{

	raw_GetSize(nWidth, nHeight  );
}

inline enum DUI_TBITEM_STYLE  IDUIToolBarPushExButton::GetStyle()
{
	enum DUI_TBITEM_STYLE  _result;
	raw_GetStyle(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetObjPtr(OLE_HANDLE  pObjPtr  )
{

	raw_SetObjPtr(pObjPtr  );
}

inline BOOL  IDUIToolBarPushExButton::SetText(tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetText(xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIToolBarPushExButton::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIToolBarPushExButton::SetData(OLE_HANDLE  hData  )
{

	raw_SetData(hData  );
}

inline OLE_HANDLE  IDUIToolBarPushExButton::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetGraphic(OLE_HANDLE  hBmp, BOOL  bIcon  )
{
	VARIANT_BOOL xxx_bIcon = bIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetGraphic(hBmp, xxx_bIcon  );
}

inline OLE_HANDLE  IDUIToolBarPushExButton::GetGraphic()
{
	OLE_HANDLE  _result;
	raw_GetGraphic(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetState(enum DUI_TBITEM_STATE  eState, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetState(eState, xxx_bRedraw  );
}

inline enum DUI_TBITEM_STATE  IDUIToolBarPushExButton::GetState()
{
	enum DUI_TBITEM_STATE  _result;
	raw_GetState(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetTooltip(tstring  strTooltip  )
{
	_bstr_t xxx_strTooltip(strTooltip.c_str());

	raw_SetTooltip(xxx_strTooltip  );
}

inline tstring  IDUIToolBarPushExButton::GetTooltip()
{
	BSTR _result = NULL;
	raw_GetTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIToolBarPushExButton::SetDisableGraphic(OLE_HANDLE  hBmp, BOOL  bIcon  )
{
	VARIANT_BOOL xxx_bIcon = bIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDisableGraphic(hBmp, xxx_bIcon  );
}

inline struct SkinRect  IDUIToolBarPushExButton::GetRect()
{
	struct SkinRect  _result;
	raw_GetRect(&_result);
	return _result;
}

inline void IDUIToolBarPushExButton::SetBtnExId(long  nID  )
{

	raw_SetBtnExId(nID  );
}

inline long  IDUIToolBarPushExButton::GetBtnExId()
{
	long  _result;
	raw_GetBtnExId(&_result);
	return _result;
}

inline long  IDUIStarCtrl::GetFrames()
{
	long  _result;
	raw_GetFrames(&_result);
	return _result;
}

inline BOOL  IDUIStarCtrl::SetFrames(long  nFrames, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetFrames(nFrames, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIStarCtrl::GetCurrPos()
{
	long  _result;
	raw_GetCurrPos(&_result);
	return _result;
}

inline BOOL  IDUIStarCtrl::SetCurrPos(long  nPos, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetCurrPos(nPos, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIStarCtrl::IsCanSelStar()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsCanSelStar(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIStarCtrl::SetCanSelStar(BOOL  bCanSelStar  )
{
	VARIANT_BOOL xxx_bCanSelStar = bCanSelStar ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCanSelStar(xxx_bCanSelStar  );
}

inline OLE_HANDLE  IDUIHwndObj::GetSafeHwnd(short  nIndex  )
{
	OLE_HANDLE  _result;
	raw_GetSafeHwnd(nIndex, &_result);
	return _result;
}

inline BOOL  IDUIHwndObj::IsExist(OLE_HANDLE  hWnd  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsExist(hWnd, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHwndObj::Attach(OLE_HANDLE  hWnd  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_Attach(hWnd, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHwndObj::Detach(OLE_HANDLE  hWnd  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_Detach(hWnd, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIHwndObj::MoveHwndObjCtrls(struct SkinRect  rect, BOOL  bPopup  )
{
	VARIANT_BOOL xxx_bPopup = bPopup ? VARIANT_TRUE : VARIANT_FALSE;

	raw_MoveHwndObjCtrls(rect, xxx_bPopup  );
}

inline BOOL  IDUIHwndObj::ShowWindow(OLE_HANDLE  hWnd  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ShowWindow(hWnd, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHwndObj::ShowWindowByIndex(short  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ShowWindowByIndex(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIHwndObj::GetCurHwnd()
{
	OLE_HANDLE  _result;
	raw_GetCurHwnd(&_result);
	return _result;
}

inline BOOL  IDUIHwndObj::HideCurWindow()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_HideCurWindow(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIHwndObj::ShowCurWindow()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ShowCurWindow(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIHwndObj::SetClipIntersect(BOOL  bClip  )
{
	VARIANT_BOOL xxx_bClip = bClip ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetClipIntersect(xxx_bClip  );
}

inline BOOL  IDUIHwndObj::IsClipIntersect()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsClipIntersect(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIHwndObj::DetachAll()
{

	raw_DetachAll();
}

inline void IDUIHwndObj::DestroyFloatWindow()
{

	raw_DestroyFloatWindow();
}

inline BOOL  IDUIComboBox::SetEditTooltip(tstring  strTooltip  )
{
_bstr_t xxx_strTooltip(strTooltip.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetEditTooltip(xxx_strTooltip, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIComboBox::GetEditTooltip()
{
	BSTR _result = NULL;
	raw_GetEditTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUIComboBox::SetButtonTooltip(tstring  strTooltip  )
{
_bstr_t xxx_strTooltip(strTooltip.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetButtonTooltip(xxx_strTooltip, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIComboBox::GetButtonTooltip()
{
	BSTR _result = NULL;
	raw_GetButtonTooltip(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIComboBox::SetCurrText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetCurrText(xxx_strText  );
}

inline tstring  IDUIComboBox::GetCurrText()
{
	BSTR _result = NULL;
	raw_GetCurrText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIComboBox::SetDefText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetDefText(xxx_strText  );
}

inline tstring  IDUIComboBox::GetDefText()
{
	BSTR _result = NULL;
	raw_GetDefText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline long  IDUIComboBox::AddItem(tstring  strText, long  nID, OLE_HANDLE  hInfo  )
{
_bstr_t xxx_strText(strText.c_str());
	long  _result;
	raw_AddItem(xxx_strText, nID, hInfo, &_result);
	return _result;
}

inline long  IDUIComboBox::AddItemWithImage(tstring  strText, tstring  strPath, long  nID, OLE_HANDLE  hInfo  )
{
_bstr_t xxx_strText(strText.c_str());
_bstr_t xxx_strPath(strPath.c_str());
	long  _result;
	raw_AddItemWithImage(xxx_strText, xxx_strPath, nID, hInfo, &_result);
	return _result;
}

inline long  IDUIComboBox::AddItemWithIcon(tstring  strText, OLE_HANDLE  hIcon, long  nID, OLE_HANDLE  hInfo  )
{
_bstr_t xxx_strText(strText.c_str());
	long  _result;
	raw_AddItemWithIcon(xxx_strText, hIcon, nID, hInfo, &_result);
	return _result;
}

inline long  IDUIComboBox::AddItemWithImgLst(tstring  strText, long  nID, long  nImageIndex  )
{
_bstr_t xxx_strText(strText.c_str());
	long  _result;
	raw_AddItemWithImgLst(xxx_strText, nID, nImageIndex, &_result);
	return _result;
}

inline BOOL  IDUIComboBox::SetItemText(long  nIndex, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemText(nIndex, xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIComboBox::GetItemText(long  nIndex  )
{
	BSTR _result = NULL;
	raw_GetItemText(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline BOOL  IDUIComboBox::RemoveAt(long  nIndex  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveAt(nIndex, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIComboBox::RemoveAll()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveAll(&_result);
	return _result ? TRUE : FALSE;
}

inline IDispatch * IDUIComboBox::GetPopupList()
{
	IDispatch * _result;
	raw_GetPopupList(&_result);
	return _result;
}

inline OLE_HANDLE  IDUIComboBox::GetImageList()
{
	OLE_HANDLE  _result;
	raw_GetImageList(&_result);
	return _result;
}

inline void IDUIComboBox::SetImageList(OLE_HANDLE  hImageList  )
{

	raw_SetImageList(hImageList  );
}

inline long  IDUIComboBox::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline void IDUIComboBox::SetBorderDrawColor(BOOL  bDrawColor, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetBorderDrawColor(xxx_bDrawColor, xxx_bRedraw  );
}

inline BOOL  IDUIComboBox::GetBorderDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetBorderDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIComboBox::SetBorderImage(short  nIndex, struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBorderImage(nIndex, pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUIComboBox::GetBorderImage(short  nIndex  )
{
	struct IDUIImageBase * _result;
	raw_GetBorderImage(nIndex, &_result);
	return _result;
}

inline void IDUIComboBox::SetCurSel(long  nSelect  )
{

	raw_SetCurSel(nSelect  );
}

inline long  IDUIComboBox::GetCurSel()
{
	long  _result;
	raw_GetCurSel(&_result);
	return _result;
}

inline void IDUIComboBox::SetPopupList(IDispatch * pPoputList  )
{

	raw_SetPopupList(pPoputList  );
}

inline void IDUIComboBox::SetMaxItemCount(long  nItemCount  )
{

	raw_SetMaxItemCount(nItemCount  );
}

inline long  IDUIComboBox::GetMaxItemCount()
{
	long  _result;
	raw_GetMaxItemCount(&_result);
	return _result;
}

inline void IDUIComboBox::SetData(short  nIndex, OLE_HANDLE  hData  )
{

	raw_SetData(nIndex, hData  );
}

inline OLE_HANDLE  IDUIComboBox::GetData(short  nIndex  )
{
	OLE_HANDLE  _result;
	raw_GetData(nIndex, &_result);
	return _result;
}

inline BOOL  IDUIComboBox::SetItemTooltip(long  nIndex, tstring  strText  )
{
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetItemTooltip(nIndex, xxx_strText, &_result);
	return _result ? TRUE : FALSE;
}

inline tstring  IDUIComboBox::GetItemTooltip(long  nIndex  )
{
	BSTR _result = NULL;
	raw_GetItemTooltip(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIComboBox::ShowPopupList(BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ShowPopupList(xxx_bShow  );
}

inline void IDUIPopupMenu::TrackPopupMenu(enum DUI_TPMSTYLE  eFlags, short  nX, short  nY, OLE_HANDLE  hWnd  )
{

	raw_TrackPopupMenu(eFlags, nX, nY, hWnd  );
}

inline OLE_HANDLE  IDUIPopupMenu::CreatePopupMenu()
{
	OLE_HANDLE  _result;
	raw_CreatePopupMenu(&_result);
	return _result;
}

inline struct IDUIMenuItemBase * IDUIPopupMenu::AppendMenu(long  nID, tstring  strName, tstring  strText, long  nGroupID, enum DUI_MENUITEM_STYLE  eStyle, BOOL  bIsPopupSytle, BOOL  bRecalculate  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bIsPopupSytle = bIsPopupSytle ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRecalculate = bRecalculate ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_AppendMenu(nID, xxx_strName, xxx_strText, nGroupID, eStyle, xxx_bIsPopupSytle, xxx_bRecalculate, &_result);
	return _result;
}

inline struct IDUIMenuItemBase * IDUIPopupMenu::InsertMenu(short  nIndex, long  nID, tstring  strName, tstring  strText, long  nGroupID, enum DUI_MENUITEM_STYLE  eStyle, BOOL  bIsPopupSytle, BOOL  bRecalculate  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bIsPopupSytle = bIsPopupSytle ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRecalculate = bRecalculate ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_InsertMenu(nIndex, nID, xxx_strName, xxx_strText, nGroupID, eStyle, xxx_bIsPopupSytle, xxx_bRecalculate, &_result);
	return _result;
}

inline BOOL  IDUIPopupMenu::RemoveMenu(long  nItem, BOOL  bByPos  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveMenu(nItem, xxx_bByPos, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIMenuItemBase * IDUIPopupMenu::GetMenu(long  nItem, BOOL  bByPos, enum DUI_MENUITEM_STYLE  eStyle  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_GetMenu(nItem, xxx_bByPos, eStyle, &_result);
	return _result;
}

inline long  IDUIPopupMenu::GetMenuItemCount()
{
	long  _result;
	raw_GetMenuItemCount(&_result);
	return _result;
}

inline struct IPopMenu * IDUIPopupMenu::GetSubMenu(short  nIndex  )
{
	struct IPopMenu * _result;
	raw_GetSubMenu(nIndex, &_result);
	return _result;
}

inline BOOL  IDUIPopupMenu::IsMenuVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsMenuVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IDUIPopupMenu::GetHandle()
{
	OLE_HANDLE  _result;
	raw_GetHandle(&_result);
	return _result;
}

inline void IDUIPopupMenu::SetMenuPos(short  x, short  y  )
{

	raw_SetMenuPos(x, y  );
}

inline tstring  IDUIPopupMenu::GetMenuTextByIndex(short  nIndex  )
{
	BSTR _result = NULL;
	raw_GetMenuTextByIndex(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline long  IDUIPopupMenu::GetMenuItemID(short  nIndex  )
{
	long  _result;
	raw_GetMenuItemID(nIndex, &_result);
	return _result;
}

inline void IDUIPopupMenu::SetOwnerWnd(OLE_HANDLE  hWnd  )
{

	raw_SetOwnerWnd(hWnd  );
}

inline void IDUIPopupMenu::SetMenuRect(struct SkinRect  rect  )
{

	raw_SetMenuRect(rect  );
}

inline void IDUIPopupMenu::SetOwnerCtrl(struct IDUIControlBase * pOwnerCtrl  )
{

	raw_SetOwnerCtrl(pOwnerCtrl  );
}

inline struct IDUIControlBase * IDUIPopupMenu::GetOwnerCtrl()
{
	struct IDUIControlBase * _result;
	raw_GetOwnerCtrl(&_result);
	return _result;
}

inline void IDUIPopupMenu::SetItemVisible(long  nItem, BOOL  bByPos, BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemVisible(nItem, xxx_bByPos, xxx_bVisible  );
}

inline void IDUIPopupMenu::EnableMenuItem(long  nItem, BOOL  bByPos, BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableMenuItem(nItem, xxx_bByPos, xxx_bEnable  );
}

inline void IDUIPopupMenu::SetEventRecieve(struct IDirectUI * pDirectUI  )
{

	raw_SetEventRecieve(pDirectUI  );
}

inline struct IDirectUI * IDUIPopupMenu::GetEventRecieve()
{
	struct IDirectUI * _result;
	raw_GetEventRecieve(&_result);
	return _result;
}

inline void IDUIPopupMenu::SetAutoCheck(BOOL  bAutoCheck  )
{
	VARIANT_BOOL xxx_bAutoCheck = bAutoCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoCheck(xxx_bAutoCheck  );
}

inline BOOL  IDUIPopupMenu::GetAutoCheck()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetAutoCheck(&_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIPopupMenu::TrackPopupMenuEx(enum DUI_TPMSTYLE  eFlags, short  nX, short  nY, OLE_HANDLE  hWnd  )
{
	long  _result;
	raw_TrackPopupMenuEx(eFlags, nX, nY, hWnd, &_result);
	return _result;
}

inline void IDUIPopupMenu::SetUseStandardMenu(BOOL  bAutoCheck  )
{
	VARIANT_BOOL xxx_bAutoCheck = bAutoCheck ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseStandardMenu(xxx_bAutoCheck  );
}

inline BOOL  IDUIPopupMenu::GetUseStandardMenu()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetUseStandardMenu(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIPopupMenu::SetStandardMenuHanlde(OLE_HANDLE  hMenuHandle  )
{

	raw_SetStandardMenuHanlde(hMenuHandle  );
}

inline OLE_HANDLE  IDUIPopupMenu::GetStandardMenuHanlde()
{
	OLE_HANDLE  _result;
	raw_GetStandardMenuHanlde(&_result);
	return _result;
}

inline enum DUI_RENDERENGINE_TYPE  IDUIPopupMenu::GetRenderType()
{
	enum DUI_RENDERENGINE_TYPE  _result;
	raw_GetRenderType(&_result);
	return _result;
}

inline void IDUIPopupMenu::SetRenderType(enum DUI_RENDERENGINE_TYPE  eRenderType  )
{

	raw_SetRenderType(eRenderType  );
}

inline void IDUIPopupMenu::SetMenuVisible(BOOL  bShow  )
{
	VARIANT_BOOL xxx_bShow = bShow ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetMenuVisible(xxx_bShow  );
}

inline void IDUIPopupMenu::SetDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetDrawColor(xxx_bDrawColor  );
}

inline void IDUIMenuItemBase::SetID(long  nID  )
{

	raw_SetID(nID  );
}

inline long  IDUIMenuItemBase::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline enum DUI_MENUITEM_STYLE  IDUIMenuItemBase::GetStyle()
{
	enum DUI_MENUITEM_STYLE  _result;
	raw_GetStyle(&_result);
	return _result;
}

inline void IDUIMenuItemBase::SetObjPtr(OLE_HANDLE  pObjPtr  )
{

	raw_SetObjPtr(pObjPtr  );
}

inline void IDUIMenuItemBase::SetVisible(BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetVisible(xxx_bVisible  );
}

inline void IDUIMenuItemBase::GetVisible(VARIANT_BOOL * pbResult  )
{

	raw_GetVisible(pbResult  );
}

inline void IPopMenu::TrackPopupMenu(enum DUI_TPMSTYLE  eFlags, short  nX, short  nY, OLE_HANDLE  hWnd  )
{

	raw_TrackPopupMenu(eFlags, nX, nY, hWnd  );
}

inline struct IDUIMenuItemBase * IPopMenu::AppendMenu(long  nID, tstring  strName, tstring  strText, long  nGroupID, enum DUI_MENUITEM_STYLE  eStyle, BOOL  bIsPopupStyle, BOOL  bRecalculate  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bIsPopupStyle = bIsPopupStyle ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRecalculate = bRecalculate ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_AppendMenu(nID, xxx_strName, xxx_strText, nGroupID, eStyle, xxx_bIsPopupStyle, xxx_bRecalculate, &_result);
	return _result;
}

inline struct IDUIMenuItemBase * IPopMenu::InsertMenu(short  nIndex, long  nID, tstring  strName, tstring  strText, long  nGroupID, enum DUI_MENUITEM_STYLE  eStyle, BOOL  bIsPopupStyle, BOOL  bRecalculate  )
{
_bstr_t xxx_strName(strName.c_str());
_bstr_t xxx_strText(strText.c_str());
	VARIANT_BOOL xxx_bIsPopupStyle = bIsPopupStyle ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bRecalculate = bRecalculate ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_InsertMenu(nIndex, nID, xxx_strName, xxx_strText, nGroupID, eStyle, xxx_bIsPopupStyle, xxx_bRecalculate, &_result);
	return _result;
}

inline BOOL  IPopMenu::RemoveMenu(long  nItem, BOOL  bByPos  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveMenu(nItem, xxx_bByPos, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIMenuItemBase * IPopMenu::GetMenu(long  nItem, BOOL  bByPos, enum DUI_MENUITEM_STYLE  eStyle  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	struct IDUIMenuItemBase * _result;
	raw_GetMenu(nItem, xxx_bByPos, eStyle, &_result);
	return _result;
}

inline long  IPopMenu::GetMenuItemCount()
{
	long  _result;
	raw_GetMenuItemCount(&_result);
	return _result;
}

inline struct IPopMenu * IPopMenu::GetSubMenu(short  nIndex  )
{
	struct IPopMenu * _result;
	raw_GetSubMenu(nIndex, &_result);
	return _result;
}

inline BOOL  IPopMenu::IsMenuVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsMenuVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline OLE_HANDLE  IPopMenu::GetHandle()
{
	OLE_HANDLE  _result;
	raw_GetHandle(&_result);
	return _result;
}

inline void IPopMenu::SetMenuPos(short  x, short  y  )
{

	raw_SetMenuPos(x, y  );
}

inline tstring  IPopMenu::GetMenuTextByIndex(short  nIndex  )
{
	BSTR _result = NULL;
	raw_GetMenuTextByIndex(nIndex, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline long  IPopMenu::GetMenuItemID(short  nIndex  )
{
	long  _result;
	raw_GetMenuItemID(nIndex, &_result);
	return _result;
}

inline void IPopMenu::SetItemVisible(long  nItem, BOOL  bByPos, BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetItemVisible(nItem, xxx_bByPos, xxx_bVisible  );
}

inline void IPopMenu::EnableMenuItem(long  nItem, BOOL  bByPos, BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bByPos = bByPos ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableMenuItem(nItem, xxx_bByPos, xxx_bEnable  );
}

inline void IPopMenu::SetMenuBar(OLE_HANDLE  hMenuBar  )
{

	raw_SetMenuBar(hMenuBar  );
}

inline OLE_HANDLE  IPopMenu::GetMenuBar()
{
	OLE_HANDLE  _result;
	raw_GetMenuBar(&_result);
	return _result;
}

inline void IPopMenu::UnSelRadioGroup(long  nMenuBar  )
{

	raw_UnSelRadioGroup(nMenuBar  );
}

inline void IDUIMenuItem::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline void IDUIMenuItem::GetText(BSTR * pstrResult  )
{

	raw_GetText(pstrResult  );
}

inline void IDUIMenuItem::SetData(OLE_HANDLE  pData  )
{

	raw_SetData(pData  );
}

inline void IDUIMenuItem::GetData(OLE_HANDLE * phResult  )
{

	raw_GetData(phResult  );
}

inline void IDUIMenuItem::SetHotKey(tstring  strHotKey  )
{
	_bstr_t xxx_strHotKey(strHotKey.c_str());

	raw_SetHotKey(xxx_strHotKey  );
}

inline void IDUIMenuItem::GetHotKey(BSTR * pstrResult  )
{

	raw_GetHotKey(pstrResult  );
}

inline void IDUIMenuItem::SetState(enum DUI_MENUITEM_STATE  eState  )
{

	raw_SetState(eState  );
}

inline void IDUIMenuItem::GetState(enum DUI_MENUITEM_STATE * peResult  )
{

	raw_GetState(peResult  );
}

inline void IDUIMenuPushItem::SetGraphic(tstring  strImage  )
{
	_bstr_t xxx_strImage(strImage.c_str());

	raw_SetGraphic(xxx_strImage  );
}

inline tstring  IDUIMenuPushItem::GetGraphic()
{
	BSTR _result = NULL;
	raw_GetGraphic(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIMenuPushItem::SetPopStyle(BOOL  bIsPopupStyle  )
{
	VARIANT_BOOL xxx_bIsPopupStyle = bIsPopupStyle ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetPopStyle(xxx_bIsPopupStyle  );
}

inline BOOL  IDUIMenuPushItem::GetPopStyle()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_GetPopStyle(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIMenuPushItem::SetGraphicFromImageBase(struct IDUIImageBase * pImageBase  )
{

	raw_SetGraphicFromImageBase(pImageBase  );
}

inline void IDUIMenuPushItem::SetGraphicBitmap(OLE_HANDLE  hBitmap  )
{

	raw_SetGraphicBitmap(hBitmap  );
}

inline void IDUIMenuCheckItem::SetCheck(enum DUI_MENUITEM_VALUE  eValue  )
{

	raw_SetCheck(eValue  );
}

inline enum DUI_MENUITEM_VALUE  IDUIMenuCheckItem::GetCheck()
{
	enum DUI_MENUITEM_VALUE  _result;
	raw_GetCheck(&_result);
	return _result;
}

inline void IDUIMenuCheckItem::SetGraphic(enum DUI_MENUITEM_STATE  eStatus, tstring  strImage  )
{
	_bstr_t xxx_strImage(strImage.c_str());

	raw_SetGraphic(eStatus, xxx_strImage  );
}

inline void IDUIMenuCheckItem::SetGraphicBitmap(enum DUI_MENUITEM_STATE  eStatus, OLE_HANDLE  hBitmap  )
{

	raw_SetGraphicBitmap(eStatus, hBitmap  );
}

inline OLE_HANDLE  IDUIMenuCheckItem::GetGraphicBitmap(enum DUI_MENUITEM_STATE  eStatus  )
{
	OLE_HANDLE  _result;
	raw_GetGraphicBitmap(eStatus, &_result);
	return _result;
}

inline void IDUIMenuRadioItem::SetGroupID(long  nID  )
{

	raw_SetGroupID(nID  );
}

inline long  IDUIMenuRadioItem::GetGroupID()
{
	long  _result;
	raw_GetGroupID(&_result);
	return _result;
}

inline void IDUIMenuRadioItem::SetRadio()
{

	raw_SetRadio();
}

inline enum DUI_MENUITEM_VALUE  IDUIMenuRadioItem::GetValue()
{
	enum DUI_MENUITEM_VALUE  _result;
	raw_GetValue(&_result);
	return _result;
}

inline void IDUIMenuRadioItem::SetGraphic(enum DUI_MENUITEM_STATE  eStatus, tstring  strImage  )
{
	_bstr_t xxx_strImage(strImage.c_str());

	raw_SetGraphic(eStatus, xxx_strImage  );
}

inline void IDUIMenuRadioItem::SetGraphicBitmap(enum DUI_MENUITEM_STATE  eStatus, OLE_HANDLE  hBitmap  )
{

	raw_SetGraphicBitmap(eStatus, hBitmap  );
}

inline OLE_HANDLE  IDUIMenuRadioItem::GetGraphicBitmap(enum DUI_MENUITEM_STATE  eStatus  )
{
	OLE_HANDLE  _result;
	raw_GetGraphicBitmap(eStatus, &_result);
	return _result;
}

inline BOOL  IDUILogoObj::SetLogoImage(tstring  strFileName  )
{
_bstr_t xxx_strFileName(strFileName.c_str());
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetLogoImage(xxx_strFileName, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUILogoObj::DestroyLogoImage()
{

	raw_DestroyLogoImage();
}

inline void IDUILogoObj::SetImageHandle(OLE_HANDLE  hBitmap  )
{

	raw_SetImageHandle(hBitmap  );
}

inline BOOL  IDUILogoObj::SetBackImage(struct IDUIImageBase * pImageBase, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetBackImage(pImageBase, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUIImageBase * IDUILogoObj::GetBackImage()
{
	struct IDUIImageBase * _result;
	raw_GetBackImage(&_result);
	return _result;
}

inline void IDUILogoObj::SetImageHandleEx(OLE_HANDLE  hBitmap, long  nX, long  nY, long  nWidth, long  nHeight  )
{

	raw_SetImageHandleEx(hBitmap, nX, nY, nWidth, nHeight  );
}

inline void IDUILogoObj::GetState(enum DUI_LOGOBJSTATE * pResult  )
{

	raw_GetState(pResult  );
}

inline void IDUILogoObj::SetState(enum DUI_LOGOBJSTATE  eState  )
{

	raw_SetState(eState  );
}

inline void IDUILogoObj::SetImageBorder(long  nLeft, long  nTop, long  nRight, long  nBottom  )
{

	raw_SetImageBorder(nLeft, nTop, nRight, nBottom  );
}

inline void IDUIFormBorder::SetCaption(tstring  bstrCaption, BOOL  bRefresh  )
{
	_bstr_t xxx_bstrCaption(bstrCaption.c_str());
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCaption(xxx_bstrCaption, xxx_bRefresh  );
}

inline void IDUIFormBorder::SetIcon(OLE_HANDLE  hBitmapIcon, BOOL  bRefresh, BOOL  bIsIcon  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL xxx_bIsIcon = bIsIcon ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetIcon(hBitmapIcon, xxx_bRefresh, xxx_bIsIcon  );
}

inline void IDUIFormBorder::SetIconByImageBase(struct IDUIImageBase * hImageBase, BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetIconByImageBase(hImageBase, xxx_bRefresh  );
}

inline void IDUIFormBorder::SetCaptionHeight(long  nHeight  )
{

	raw_SetCaptionHeight(nHeight  );
}

inline void IDUIFormBorder::SetUseSysMenu(BOOL  bUseSysMenu  )
{
	VARIANT_BOOL xxx_bUseSysMenu = bUseSysMenu ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetUseSysMenu(xxx_bUseSysMenu  );
}

inline void IDUIFormBorder::SetSysBtn(tstring  strCloseBtn, tstring  strMaxBtn, tstring  strMinBtn, tstring  strHelpBtn  )
{
	_bstr_t xxx_strCloseBtn(strCloseBtn.c_str());
	_bstr_t xxx_strMaxBtn(strMaxBtn.c_str());
	_bstr_t xxx_strMinBtn(strMinBtn.c_str());
	_bstr_t xxx_strHelpBtn(strHelpBtn.c_str());

	raw_SetSysBtn(xxx_strCloseBtn, xxx_strMaxBtn, xxx_strMinBtn, xxx_strHelpBtn  );
}

inline void IDUIFormBorder::SetCaptionDragable(BOOL  bValue  )
{
	VARIANT_BOOL xxx_bValue = bValue ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCaptionDragable(xxx_bValue  );
}

inline void IDUIFormBorder::DBClickCaptionMaxWnd(BOOL  bValue  )
{
	VARIANT_BOOL xxx_bValue = bValue ? VARIANT_TRUE : VARIANT_FALSE;

	raw_DBClickCaptionMaxWnd(xxx_bValue  );
}

inline BOOL  IDUICalendar::IsAutoSize()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsAutoSize(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICalendar::SetAutoSize(BOOL  bAutoSize  )
{
	VARIANT_BOOL xxx_bAutoSize = bAutoSize ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetAutoSize(xxx_bAutoSize  );
}

inline long  IDUICalendar::GetSpace()
{
	long  _result;
	raw_GetSpace(&_result);
	return _result;
}

inline void IDUICalendar::SetSpace(long  nSpace  )
{

	raw_SetSpace(nSpace  );
}

inline void IDUICalendar::SetFixedSize(long  nWidth, long  nHeight  )
{

	raw_SetFixedSize(nWidth, nHeight  );
}

inline void IDUICalendar::GetFixedSize(long * pWidth, long * pHeight  )
{

	raw_GetFixedSize(pWidth, pHeight  );
}

inline BOOL  IDUICalendar::IsBackDrawColor()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsBackDrawColor(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUICalendar::SetBackDrawColor(BOOL  bDrawColor  )
{
	VARIANT_BOOL xxx_bDrawColor = bDrawColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetBackDrawColor(xxx_bDrawColor  );
}

inline short  IDUICalendar::GetYearMonthBarHeight()
{
	short  _result;
	raw_GetYearMonthBarHeight(&_result);
	return _result;
}

inline void IDUICalendar::SetYearMonthBarHeight(short  nHeight  )
{

	raw_SetYearMonthBarHeight(nHeight  );
}

inline short  IDUICalendar::GetWeekBarHeight()
{
	short  _result;
	raw_GetWeekBarHeight(&_result);
	return _result;
}

inline void IDUICalendar::SetWeekBarHeight(short  nHeight  )
{

	raw_SetWeekBarHeight(nHeight  );
}

inline void IDUICalendar::SetWeekBarText(tstring  strSun, tstring  strMon, tstring  strTues, tstring  strWed, tstring  strThurs, tstring  strFri, tstring  strSat  )
{
	_bstr_t xxx_strSun(strSun.c_str());
	_bstr_t xxx_strMon(strMon.c_str());
	_bstr_t xxx_strTues(strTues.c_str());
	_bstr_t xxx_strWed(strWed.c_str());
	_bstr_t xxx_strThurs(strThurs.c_str());
	_bstr_t xxx_strFri(strFri.c_str());
	_bstr_t xxx_strSat(strSat.c_str());

	raw_SetWeekBarText(xxx_strSun, xxx_strMon, xxx_strTues, xxx_strWed, xxx_strThurs, xxx_strFri, xxx_strSat  );
}

inline void IDUICalendar::GetWeekBarText(BSTR * pstrSun, BSTR * pstrMon, BSTR * pstrTues, BSTR * pstrWed, BSTR * pstrThurs, BSTR * pstrFri, BSTR * pstrSat  )
{

	raw_GetWeekBarText(pstrSun, pstrMon, pstrTues, pstrWed, pstrThurs, pstrFri, pstrSat  );
}

inline void IDUICalendar::SetWeekBarTextByEnum(enum DUI_WEEKTEXT  eWeekText, tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetWeekBarTextByEnum(eWeekText, xxx_strText  );
}

inline tstring  IDUICalendar::GetWeekBarTextByEnum(enum DUI_WEEKTEXT  eWeekText  )
{
	BSTR _result = NULL;
	raw_GetWeekBarTextByEnum(eWeekText, &_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline struct DUI_CALENDARDATE  IDUICalendar::GetSelectedDate()
{
	struct DUI_CALENDARDATE  _result;
	raw_GetSelectedDate(&_result);
	return _result;
}

inline void IDUICalendar::SetSelectedDate(struct DUI_CALENDARDATE * pDate  )
{

	raw_SetSelectedDate(pDate  );
}

inline void IDUICalendar::SetWeekBarTextStyle(struct IDUITextStyle * pTextStyle  )
{

	raw_SetWeekBarTextStyle(pTextStyle  );
}

inline void IDUICalendar::GetWeekBarTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	raw_GetWeekBarTextStyle(ppTextStyle  );
}

inline void IDUICalendar::SetWeekStart(enum DUI_WEEKTEXT  eWeekStart  )
{

	raw_SetWeekStart(eWeekStart  );
}

inline void IDUICalendar::GetWeekStart(enum DUI_WEEKTEXT * eWeekStart  )
{

	raw_GetWeekStart(eWeekStart  );
}

inline void IDUICalendar::SetDayTextStyle(struct IDUITextStyle * pTextStyle  )
{

	raw_SetDayTextStyle(pTextStyle  );
}

inline void IDUICalendar::GetDayTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	raw_GetDayTextStyle(ppTextStyle  );
}

inline void IDUICalendar::SetPreMonthDayTextStyle(struct IDUITextStyle * pTextStyle  )
{

	raw_SetPreMonthDayTextStyle(pTextStyle  );
}

inline void IDUICalendar::GetPreMonthDayTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	raw_GetPreMonthDayTextStyle(ppTextStyle  );
}

inline void IDUICalendar::SetNextMonthDayTextStyle(struct IDUITextStyle * pTextStyle  )
{

	raw_SetNextMonthDayTextStyle(pTextStyle  );
}

inline void IDUICalendar::GetNextMonthDayTextStyle(struct IDUITextStyle ** ppTextStyle  )
{

	raw_GetNextMonthDayTextStyle(ppTextStyle  );
}

inline void IDUICalendar::GetFocusDayImage(struct IDUIImageBase ** ppImageBase  )
{

	raw_GetFocusDayImage(ppImageBase  );
}

inline void IDUICalendar::SetFocusDayImage(struct IDUIImageBase * pImageBase  )
{

	raw_SetFocusDayImage(pImageBase  );
}

inline void IDUICalendar::IsShowFrameGrid(VARIANT_BOOL * pbShowGrid  )
{

	raw_IsShowFrameGrid(pbShowGrid  );
}

inline void IDUICalendar::SetShowFrameGrid(BOOL  bShowGrid  )
{
	VARIANT_BOOL xxx_bShowGrid = bShowGrid ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowFrameGrid(xxx_bShowGrid  );
}

inline void IDUICalendar::IsShowFrameGridColor(VARIANT_BOOL * pbShowGridColor  )
{

	raw_IsShowFrameGridColor(pbShowGridColor  );
}

inline void IDUICalendar::SetShowFrameGridColor(BOOL  bShowGridColor  )
{
	VARIANT_BOOL xxx_bShowGridColor = bShowGridColor ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetShowFrameGridColor(xxx_bShowGridColor  );
}

inline void IDUICalendar::SetFrameGridColor(OLE_COLOR  color  )
{

	raw_SetFrameGridColor(color  );
}

inline void IDUICalendar::GetFrameGridColor(OLE_COLOR * pColor  )
{

	raw_GetFrameGridColor(pColor  );
}

inline void IDUICalendar::CancelEventDate(struct DUI_CALENDARDATE  date, BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_CancelEventDate(date, xxx_bRefresh  );
}

inline void IDUICalendar::SetEventDate(struct DUI_CALENDARDATE  date, BOOL  bRefresh  )
{
	VARIANT_BOOL xxx_bRefresh = bRefresh ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEventDate(date, xxx_bRefresh  );
}

inline void IDUICalendar::IsEventDate(struct DUI_CALENDARDATE  date, VARIANT_BOOL * bpIsEventDay  )
{

	raw_IsEventDate(date, bpIsEventDay  );
}

inline void IDUICalendar::JumpToToday()
{

	raw_JumpToToday();
}

inline void IDUICalendar::JumpToSpecDay(short  year, short  month, short  day  )
{

	raw_JumpToSpecDay(year, month, day  );
}

inline BOOL  IDUISwitchCtrl::IsSwitchTabLeft()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsSwitchTabLeft(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUISwitchCtrl::SetSwitchTabPos(BOOL  bIsLeft  )
{
	VARIANT_BOOL xxx_bIsLeft = bIsLeft ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetSwitchTabPos(xxx_bIsLeft  );
}

inline tstring  IDUISwitchCtrl::GetSwitchTabLeftText()
{
	BSTR _result = NULL;
	raw_GetSwitchTabLeftText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline tstring  IDUISwitchCtrl::GetSwitchTabRightText()
{
	BSTR _result = NULL;
	raw_GetSwitchTabRightText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUISwitchCtrl::SetSwitchTabLeftText(tstring  strLeftText  )
{
	_bstr_t xxx_strLeftText(strLeftText.c_str());

	raw_SetSwitchTabLeftText(xxx_strLeftText  );
}

inline void IDUISwitchCtrl::SetSwitchTabRightText(tstring  strRightText  )
{
	_bstr_t xxx_strRightText(strRightText.c_str());

	raw_SetSwitchTabRightText(xxx_strRightText  );
}

inline void IDUIGraphCtrl::AddColumn(float  nValue1, float  nValue2, float  nValue3, float  nValue4, long  nIndex, BOOL  bIncreased  )
{
	VARIANT_BOOL xxx_bIncreased = bIncreased ? VARIANT_TRUE : VARIANT_FALSE;

	raw_AddColumn(nValue1, nValue2, nValue3, nValue4, nIndex, xxx_bIncreased  );
}

inline void IDUIGraphCtrl::AddCurve()
{

	raw_AddCurve();
}

inline void IDUIGraphCtrl::AddCurvePoint(long  nIndex, float  nValueX, float  nValueY  )
{

	raw_AddCurvePoint(nIndex, nValueX, nValueY  );
}

inline void IDUIGraphCtrl::RemoveAllCurve()
{

	raw_RemoveAllCurve();
}

inline void IDUIGraphCtrl::RemoveAllColumns()
{

	raw_RemoveAllColumns();
}

inline void IDUIGraphCtrl::CreateTestPoint(long  nIndex  )
{

	raw_CreateTestPoint(nIndex  );
}

inline void IDUIGraphCtrl::CreateTestKLineData()
{

	raw_CreateTestKLineData();
}

inline void IDUIGraphCtrl::CreateTestHistorgramData()
{

	raw_CreateTestHistorgramData();
}

inline void IDUIGraphCtrl::CreateTestStockData()
{

	raw_CreateTestStockData();
}

inline void IDUIGraphCtrl::SetXAxisProp(float  nDataLenth, long  nUint, long  nNumPerUnit  )
{

	raw_SetXAxisProp(nDataLenth, nUint, nNumPerUnit  );
}

inline void IDUIGraphCtrl::SetYAxisProp(float  nDataLenth, long  nUint, long  nNumPerUnit, float  nAxisLevelOffset  )
{

	raw_SetYAxisProp(nDataLenth, nUint, nNumPerUnit, nAxisLevelOffset  );
}

inline void IDUIGraphCtrl::SetXAxisUnitText(long  nIndex, tstring  strDes  )
{
	_bstr_t xxx_strDes(strDes.c_str());

	raw_SetXAxisUnitText(nIndex, xxx_strDes  );
}

inline void IDUIGraphCtrl::SetYAxisUnitText(long  nIndex, tstring  strDes  )
{
	_bstr_t xxx_strDes(strDes.c_str());

	raw_SetYAxisUnitText(nIndex, xxx_strDes  );
}

inline void IDUIGraphCtrl::SetYAxisRightUnitText(long  nIndex, tstring  strDes  )
{
	_bstr_t xxx_strDes(strDes.c_str());

	raw_SetYAxisRightUnitText(nIndex, xxx_strDes  );
}

inline void IDUIGraphCtrl::CreateTestBlockData()
{

	raw_CreateTestBlockData();
}

inline void IDUIGraphCtrl::ResetXAxisPoint(BOOL  bFreshOrInit  )
{
	VARIANT_BOOL xxx_bFreshOrInit = bFreshOrInit ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ResetXAxisPoint(xxx_bFreshOrInit  );
}

inline void IDUIGraphCtrl::AddWaitAxisText(tstring  strAxisText  )
{
	_bstr_t xxx_strAxisText(strAxisText.c_str());

	raw_AddWaitAxisText(xxx_strAxisText  );
}

inline void IDUIGraphCtrl::AddBlockGraphPoint(float  fValue  )
{

	raw_AddBlockGraphPoint(fValue  );
}

inline void IDUIGraphCtrl::SetAxisColor(long  nColor  )
{

	raw_SetAxisColor(nColor  );
}

inline void IDUIGraphCtrl::SetBlockColor(long  nColor  )
{

	raw_SetBlockColor(nColor  );
}

inline void IDUIGraphCtrl::SetBlockOverLineColor(long  nColor  )
{

	raw_SetBlockOverLineColor(nColor  );
}

inline long  IDUIMeetingConflict::GetFrames()
{
	long  _result;
	raw_GetFrames(&_result);
	return _result;
}

inline BOOL  IDUIMeetingConflict::SetFrames(long  nFrames, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetFrames(nFrames, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline long  IDUIMeetingConflict::GetCurrPos()
{
	long  _result;
	raw_GetCurrPos(&_result);
	return _result;
}

inline BOOL  IDUIMeetingConflict::SetCurrPos(long  nPos, BOOL  bRedraw  )
{
	VARIANT_BOOL xxx_bRedraw = bRedraw ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetCurrPos(nPos, xxx_bRedraw, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIMeetingConflict::IsCanSelStar()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsCanSelStar(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIMeetingConflict::SetCanSelStar(BOOL  bCanSelStar  )
{
	VARIANT_BOOL xxx_bCanSelStar = bCanSelStar ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCanSelStar(xxx_bCanSelStar  );
}

inline void IDUIMeetingConflict::SetFirstBeginTime(LONGLONG  nBeginTime  )
{

	raw_SetFirstBeginTime(nBeginTime  );
}

inline void IDUIMeetingConflict::SetFirstEndTime(LONGLONG  nEndTime  )
{

	raw_SetFirstEndTime(nEndTime  );
}

inline void IDUIMeetingConflict::SetSecondBeginTime(LONGLONG  nBeginTime  )
{

	raw_SetSecondBeginTime(nBeginTime  );
}

inline void IDUIMeetingConflict::SetSecondEndTime(LONGLONG  nEndTime  )
{

	raw_SetSecondEndTime(nEndTime  );
}

inline void IDUIMeetingConflict::SetLineX(int  nX  )
{

	raw_SetLineX(nX  );
}

inline void IDUIMeetingConflict::SetFormX(int  nX  )
{

	raw_SetFormX(nX  );
}

inline void IDUIMeetingConflict::Refresh()
{

	raw_Refresh();
}

inline void IDUIMeetingConflict::SetDotWidth(int  nDotWidth  )
{

	raw_SetDotWidth(nDotWidth  );
}

inline void IDUIMeetingConflict::SetLineWidth(int  nLineWidth  )
{

	raw_SetLineWidth(nLineWidth  );
}

inline void IDUIMeetingConflict::SetHeaderHeight(int  nHeight  )
{

	raw_SetHeaderHeight(nHeight  );
}

inline void IDUIMeetingConflict::SetTailHeight(int  nHeight  )
{

	raw_SetTailHeight(nHeight  );
}

inline void IDUIRollCalendar::GetCurDate(long * pnYear, long * pnMonth, long * pnDay  )
{

	raw_GetCurDate(pnYear, pnMonth, pnDay  );
}

inline void IDUIRollCalendar::SetCurDate(long  nYear, long  nMonth, long  nDay  )
{

	raw_SetCurDate(nYear, nMonth, nDay  );
}

inline void IDUIRollCalendar::SetShowDays(long  nDays  )
{

	raw_SetShowDays(nDays  );
}

inline void IDUIRollCalendar::SetMonthLeft(long  nMonthLeft  )
{

	raw_SetMonthLeft(nMonthLeft  );
}

inline void IDUIRollCalendar::SetMonthWidth(long  nWidth  )
{

	raw_SetMonthWidth(nWidth  );
}

inline void IDUIRollCalendar::SetDayWidth(long  nWidth  )
{

	raw_SetDayWidth(nWidth  );
}

inline void IDUIRollCalendar::SetTopSpace(long  nTopSpace  )
{

	raw_SetTopSpace(nTopSpace  );
}

inline void IDUIRollCalendar::SetBottomSpace(long  nBottomSpace  )
{

	raw_SetBottomSpace(nBottomSpace  );
}

inline void IDUIRollCalendar::SetRollSteep(long  nRollSteep  )
{

	raw_SetRollSteep(nRollSteep  );
}

inline void IDUIRollCalendar::SetRollInterval(long  nInterval  )
{

	raw_SetRollInterval(nInterval  );
}

inline BOOL  IDUIRollCalendar::SetSpecialDate(long  lYear, long  lMonth, long  lDay  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_SetSpecialDate(lYear, lMonth, lDay, &_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIRollCalendar::ClearSpecialDate(long  lYear, long  lMonth, long  lDay  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_ClearSpecialDate(lYear, lMonth, lDay, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIRollCalendar::ClearAllSpecialDate()
{

	raw_ClearAllSpecialDate();
}

inline void IDUITagCtrl::SetLeft(long  left  )
{

	raw_SetLeft(left  );
}

inline void IDUITagCtrl::SetHSpace(long  nSpace  )
{

	raw_SetHSpace(nSpace  );
}

inline void IDUITagCtrl::SetVSpace(long  nSpace  )
{

	raw_SetVSpace(nSpace  );
}

inline void IDUITagCtrl::SetTop(long  nTop  )
{

	raw_SetTop(nTop  );
}

inline struct IDUITagItem * IDUITagCtrl::CreateItem(tstring  strText, struct IDUITagItem * pParent  )
{
_bstr_t xxx_strText(strText.c_str());
	struct IDUITagItem * _result;
	raw_CreateItem(xxx_strText, pParent, &_result);
	return _result;
}

inline void IDUITagCtrl::SetItemHeight(long  nHeight  )
{

	raw_SetItemHeight(nHeight  );
}

inline void IDUITagCtrl::SetTimeInterval(long  nInterval  )
{

	raw_SetTimeInterval(nInterval  );
}

inline struct IDUITagItem * IDUITagCtrl::GetFirstItem()
{
	struct IDUITagItem * _result;
	raw_GetFirstItem(&_result);
	return _result;
}

inline struct IDUITagItem * IDUITagCtrl::GetNextItem(struct IDUITagItem * pItem  )
{
	struct IDUITagItem * _result;
	raw_GetNextItem(pItem, &_result);
	return _result;
}

inline struct IDUITagItem * IDUITagCtrl::GetTailItem()
{
	struct IDUITagItem * _result;
	raw_GetTailItem(&_result);
	return _result;
}

inline BOOL  IDUITagCtrl::PopItem(struct IDUITagItem * pItem  )
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_PopItem(pItem, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITagCtrl::DeleteItem(struct IDUITagItem * pItem  )
{

	raw_DeleteItem(pItem  );
}

inline void IDUITagCtrl::ChangeItemRect(struct IDUITagItem * pItem, BOOL  bLeft  )
{
	VARIANT_BOOL xxx_bLeft = bLeft ? VARIANT_TRUE : VARIANT_FALSE;

	raw_ChangeItemRect(pItem, xxx_bLeft  );
}

inline void IDUITagCtrl::SetMinWidth(long  nWidth  )
{

	raw_SetMinWidth(nWidth  );
}

inline void IDUITagCtrl::SetMaxWidth(long  nWidth  )
{

	raw_SetMaxWidth(nWidth  );
}

inline BOOL  IDUITagCtrl::IsMoving()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsMoving(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITagCtrl::SetLineWidth(long  nWidth  )
{

	raw_SetLineWidth(nWidth  );
}

inline BOOL  IDUITagCtrl::EnableAnimate(BOOL  bAnimate  )
{
	VARIANT_BOOL xxx_bAnimate = bAnimate ? VARIANT_TRUE : VARIANT_FALSE;
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_EnableAnimate(xxx_bAnimate, &_result);
	return _result ? TRUE : FALSE;
}

inline void IDUITagItem::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUITagItem::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUITagItem::SetVisible(BOOL  bVisible  )
{
	VARIANT_BOOL xxx_bVisible = bVisible ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetVisible(xxx_bVisible  );
}

inline BOOL  IDUITagItem::IsVisible()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsVisible(&_result);
	return _result ? TRUE : FALSE;
}

inline struct IDUITagItem * IDUITagItem::GetParent()
{
	struct IDUITagItem * _result;
	raw_GetParent(&_result);
	return _result;
}

inline struct IDUITagItem * IDUITagItem::GetSubItem(long  nIndex  )
{
	struct IDUITagItem * _result;
	raw_GetSubItem(nIndex, &_result);
	return _result;
}

inline long  IDUITagItem::GetSubItemCount()
{
	long  _result;
	raw_GetSubItemCount(&_result);
	return _result;
}

inline void IDUITagItem::SetData(OLE_HANDLE  lnData  )
{

	raw_SetData(lnData  );
}

inline OLE_HANDLE  IDUITagItem::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline void IDUIRollCtrl::ClearText()
{

	raw_ClearText();
}

inline void IDUIRollCtrl::AppendText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_AppendText(xxx_strText  );
}

inline void IDUIRollCtrl::Refresh()
{

	raw_Refresh();
}

inline void IDUIToolString::SetMajorScaleStartX(long  nX  )
{

	raw_SetMajorScaleStartX(nX  );
}

inline void IDUIToolString::SetMinorScaleStartX(long  nX  )
{

	raw_SetMinorScaleStartX(nX  );
}

inline void IDUIToolString::SetScaleEndX(long  nX  )
{

	raw_SetScaleEndX(nX  );
}

inline void IDUIToolString::SetMaxScaleTextLength(long  nLength  )
{

	raw_SetMaxScaleTextLength(nLength  );
}

inline void IDUIToolString::SetMajorScalePensize(long  nSize  )
{

	raw_SetMajorScalePensize(nSize  );
}

inline void IDUIToolString::SetMinorScalePensize(long  nSize  )
{

	raw_SetMinorScalePensize(nSize  );
}

inline void IDUIToolString::SetStartDegree(long  nDegree  )
{

	raw_SetStartDegree(nDegree  );
}

inline void IDUIToolString::SetDegreeUnit(long  nDegreeUnit  )
{

	raw_SetDegreeUnit(nDegreeUnit  );
}

inline void IDUIToolString::SetTextToLine(long  nOffset  )
{

	raw_SetTextToLine(nOffset  );
}

inline void IDUIToolString::SetRulerRange(long  nTop, long  nBottom, long  nUnitPixels  )
{

	raw_SetRulerRange(nTop, nBottom, nUnitPixels  );
}

inline void IDUIToolString::InitRuler()
{

	raw_InitRuler();
}

inline struct IDUIToolItem * IDUIToolString::AddItem(long  nID, float  nWidth, float  nHeight, long  nDeep  )
{
	struct IDUIToolItem * _result;
	raw_AddItem(nID, nWidth, nHeight, nDeep, &_result);
	return _result;
}

inline struct IDUIToolItem * IDUIToolString::AppendItem(struct IDUIToolItem * pItem, long  nID, float  nWidth, float  nHeight, long  nDeep  )
{
	struct IDUIToolItem * _result;
	raw_AppendItem(pItem, nID, nWidth, nHeight, nDeep, &_result);
	return _result;
}

inline void IDUIToolString::SetHScrollBar(struct IDUIScrollBar * pScBar  )
{

	raw_SetHScrollBar(pScBar  );
}

inline void IDUIToolString::SetVScrollBar(struct IDUIScrollBar * pScBar  )
{

	raw_SetVScrollBar(pScBar  );
}

inline void IDUIToolString::MoveUp(struct IDUIToolItem * pItem  )
{

	raw_MoveUp(pItem  );
}

inline void IDUIToolString::MoveDown(struct IDUIToolItem * pItem  )
{

	raw_MoveDown(pItem  );
}

inline struct IDUIToolItem * IDUIToolString::AddItemUp(struct IDUIToolItem * pItem, long  nID, float  nWidth, float  nHeight, long  nDeep  )
{
	struct IDUIToolItem * _result;
	raw_AddItemUp(pItem, nID, nWidth, nHeight, nDeep, &_result);
	return _result;
}

inline struct IDUIToolItem * IDUIToolString::AddItemDown(struct IDUIToolItem * pItem, long  nID, float  nWidth, float  nHeight, long  nDeep  )
{
	struct IDUIToolItem * _result;
	raw_AddItemDown(pItem, nID, nWidth, nHeight, nDeep, &_result);
	return _result;
}

inline void IDUIToolString::RemoveItem(struct IDUIToolItem * pItem  )
{

	raw_RemoveItem(pItem  );
}

inline void IDUIToolString::Refresh()
{

	raw_Refresh();
}

inline void IDUIToolString::EnableVernier(BOOL  bEnable  )
{
	VARIANT_BOOL xxx_bEnable = bEnable ? VARIANT_TRUE : VARIANT_FALSE;

	raw_EnableVernier(xxx_bEnable  );
}

inline void IDUIToolString::RemoveAllItem()
{

	raw_RemoveAllItem();
}

inline void IDUIToolItem::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUIToolItem::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIToolItem::SetData(OLE_HANDLE  lnData  )
{

	raw_SetData(lnData  );
}

inline OLE_HANDLE  IDUIToolItem::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline void IDUIToolItem::SetRect(long  nLeft, long  nTop, long  nRight, long  nBottom  )
{

	raw_SetRect(nLeft, nTop, nRight, nBottom  );
}

inline struct IDUIDetector * IDUIToolItem::AddDetector(long  nID  )
{
	struct IDUIDetector * _result;
	raw_AddDetector(nID, &_result);
	return _result;
}

inline long  IDUIToolItem::GetID()
{
	long  _result;
	raw_GetID(&_result);
	return _result;
}

inline void IDUIDetector::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUIDetector::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUIDetector::SetData(OLE_HANDLE  lnData  )
{

	raw_SetData(lnData  );
}

inline OLE_HANDLE  IDUIDetector::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline void IDUIDetector::SetHeight(float  nHeight  )
{

	raw_SetHeight(nHeight  );
}

inline struct IDUIToolItem * IDUIDetector::GetOwner()
{
	struct IDUIToolItem * _result;
	raw_GetOwner(&_result);
	return _result;
}

inline long  IDUIListCtrl::InsertItem(long  nIndex, tstring  szText, long  nID, OLE_HANDLE  hIcon, OLE_HANDLE  hSmallIcon  )
{
_bstr_t xxx_szText(szText.c_str());
	long  _result;
	raw_InsertItem(nIndex, xxx_szText, nID, hIcon, hSmallIcon, &_result);
	return _result;
}

inline void IDUIListCtrl::SetLStyle(enum LVCTRL_STYLE  nStyle  )
{

	raw_SetLStyle(nStyle  );
}

inline long  IDUIListCtrl::GetItemCount()
{
	long  _result;
	raw_GetItemCount(&_result);
	return _result;
}

inline struct IDUILCItem * IDUIListCtrl::GetAt(long  nIndex  )
{
	struct IDUILCItem * _result;
	raw_GetAt(nIndex, &_result);
	return _result;
}

inline void IDUIListCtrl::SetHorScroll(BOOL  bHorScroll  )
{
	VARIANT_BOOL xxx_bHorScroll = bHorScroll ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetHorScroll(xxx_bHorScroll  );
}

inline long  IDUIListCtrl::GetPageCount()
{
	long  _result;
	raw_GetPageCount(&_result);
	return _result;
}

inline void IDUIListCtrl::SetCurrentPage(long  nPage  )
{

	raw_SetCurrentPage(nPage  );
}

inline long  IDUIListCtrl::GetCurrentPage()
{
	long  _result;
	raw_GetCurrentPage(&_result);
	return _result;
}

inline short  IDUIListCtrl::GetItemWidth()
{
	short  _result;
	raw_GetItemWidth(&_result);
	return _result;
}

inline short  IDUIListCtrl::GetItemHeight()
{
	short  _result;
	raw_GetItemHeight(&_result);
	return _result;
}

inline short  IDUIListCtrl::GetItemHorSpace()
{
	short  _result;
	raw_GetItemHorSpace(&_result);
	return _result;
}

inline short  IDUIListCtrl::GetItemVerSpace()
{
	short  _result;
	raw_GetItemVerSpace(&_result);
	return _result;
}

inline struct SkinRect  IDUIListCtrl::GetBorderRect()
{
	struct SkinRect  _result;
	raw_GetBorderRect(&_result);
	return _result;
}

inline void IDUIListCtrl::SetItemWidth(long  nItemWidth  )
{

	raw_SetItemWidth(nItemWidth  );
}

inline void IDUIListCtrl::SetItemHeight(long  nItemHeight  )
{

	raw_SetItemHeight(nItemHeight  );
}

inline void IDUIListCtrl::SetItemHorSpace(long  nHorSpace  )
{

	raw_SetItemHorSpace(nHorSpace  );
}

inline void IDUIListCtrl::SetItemVerSpace(long  nVerSpace  )
{

	raw_SetItemVerSpace(nVerSpace  );
}

inline void IDUIListCtrl::SetBorderRect(struct SkinRect  rcBorder  )
{

	raw_SetBorderRect(rcBorder  );
}

inline void IDUIListCtrl::RemoveItemByIndex(long  nIndex, BOOL  bDel  )
{
	VARIANT_BOOL xxx_bDel = bDel ? VARIANT_TRUE : VARIANT_FALSE;

	raw_RemoveItemByIndex(nIndex, xxx_bDel  );
}

inline void IDUIListCtrl::InsertItemByItem(struct IDUILCItem * pItem, long  nIndex  )
{

	raw_InsertItemByItem(pItem, nIndex  );
}

inline void IDUIListCtrl::RemoveItemByItem(struct IDUILCItem * pItem, BOOL  bDel  )
{
	VARIANT_BOOL xxx_bDel = bDel ? VARIANT_TRUE : VARIANT_FALSE;

	raw_RemoveItemByItem(pItem, xxx_bDel  );
}

inline BOOL  IDUIListCtrl::EraseAllItem()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_EraseAllItem(&_result);
	return _result ? TRUE : FALSE;
}

inline BOOL  IDUIListCtrl::DeleteAllItem()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_DeleteAllItem(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUIListCtrl::SetMaxCount(long  nMax  )
{

	raw_SetMaxCount(nMax  );
}

inline long  IDUIListCtrl::GetMaxCount()
{
	long  _result;
	raw_GetMaxCount(&_result);
	return _result;
}

inline void IDUIListCtrl::SetListModel(struct IDUIControlBase * pUIForm  )
{

	raw_SetListModel(pUIForm  );
}

inline struct IDUILCItem * IDUIListCtrl::GetFirstSelectedItem()
{
	struct IDUILCItem * _result;
	raw_GetFirstSelectedItem(&_result);
	return _result;
}

inline struct IDUILCItem * IDUIListCtrl::GetNextSelectedItem(struct IDUILCItem * pItem  )
{
	struct IDUILCItem * _result;
	raw_GetNextSelectedItem(pItem, &_result);
	return _result;
}

inline long  IDUIListCtrl::GetSelectedItemCount()
{
	long  _result;
	raw_GetSelectedItemCount(&_result);
	return _result;
}

inline long  IDUIListCtrl::GetVisibleCount()
{
	long  _result;
	raw_GetVisibleCount(&_result);
	return _result;
}

inline struct IDUILCItem * IDUIListCtrl::GetPageItem(long  nPageIndex, long  nIndex  )
{
	struct IDUILCItem * _result;
	raw_GetPageItem(nPageIndex, nIndex, &_result);
	return _result;
}

inline long  IDUIListCtrl::GetPageItemCount(long  nIndex  )
{
	long  _result;
	raw_GetPageItemCount(nIndex, &_result);
	return _result;
}

inline void IDUIListCtrl::UnSelectedItems()
{

	raw_UnSelectedItems();
}

inline void IDUILCItem::SetText(tstring  strText  )
{
	_bstr_t xxx_strText(strText.c_str());

	raw_SetText(xxx_strText  );
}

inline tstring  IDUILCItem::GetText()
{
	BSTR _result = NULL;
	raw_GetText(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline void IDUILCItem::SetHICON(OLE_HANDLE  hIcon, enum LC_ICONSTYLE  nStyle  )
{

	raw_SetHICON(hIcon, nStyle  );
}

inline struct SkinRect  IDUILCItem::GetDrawRect()
{
	struct SkinRect  _result;
	raw_GetDrawRect(&_result);
	return _result;
}

inline long  IDUILCItem::GetIndex()
{
	long  _result;
	raw_GetIndex(&_result);
	return _result;
}

inline void IDUILCItem::SetCanMerger(BOOL  bDragChangePos  )
{
	VARIANT_BOOL xxx_bDragChangePos = bDragChangePos ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetCanMerger(xxx_bDragChangePos  );
}

inline OLE_HANDLE  IDUILCItem::GetHICON()
{
	OLE_HANDLE  _result;
	raw_GetHICON(&_result);
	return _result;
}

inline OLE_HANDLE  IDUILCItem::GetChildCount()
{
	OLE_HANDLE  _result;
	raw_GetChildCount(&_result);
	return _result;
}

inline void IDUILCItem::SetFile(BOOL  bFile  )
{
	VARIANT_BOOL xxx_bFile = bFile ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetFile(xxx_bFile  );
}

inline BOOL  IDUILCItem::IsFile()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsFile(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUILCItem::SetData(OLE_HANDLE  hData  )
{

	raw_SetData(hData  );
}

inline OLE_HANDLE  IDUILCItem::GetData()
{
	OLE_HANDLE  _result;
	raw_GetData(&_result);
	return _result;
}

inline struct IDUIControlBase * IDUILCItem::GetModel()
{
	struct IDUIControlBase * _result;
	raw_GetModel(&_result);
	return _result;
}

inline void IDUILCItem::SetGraphicRect(struct SkinRect  skinRc  )
{

	raw_SetGraphicRect(skinRc  );
}

inline struct SkinRect  IDUILCItem::GetGraphicRect()
{
	struct SkinRect  _result;
	raw_GetGraphicRect(&_result);
	return _result;
}

inline void IDUILCItem::SetModel(struct IDUIControlBase * pModel, BOOL  bClone  )
{
	VARIANT_BOOL xxx_bClone = bClone ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetModel(pModel, xxx_bClone  );
}

inline BOOL  IDUILCItem::RemoveModel()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_RemoveModel(&_result);
	return _result ? TRUE : FALSE;
}

inline void IDUILCItem::SetPicPath(tstring  strPath  )
{
	_bstr_t xxx_strPath(strPath.c_str());

	raw_SetPicPath(xxx_strPath  );
}

inline tstring  IDUILCItem::GetPicPath()
{
	BSTR _result = NULL;
	raw_GetPicPath(&_result);
	tstring _strResult;
#ifdef UNICODE
	_strResult = (LPWSTR)_result;
#else
	USES_CONVERSION;
	_strResult = W2A(_result);
#endif
	return _strResult;
}

inline struct SkinRect  IDUILCItem::GetTextRect()
{
	struct SkinRect  _result;
	raw_GetTextRect(&_result);
	return _result;
}

inline long  IDUILCItem::GetBelongsPage()
{
	long  _result;
	raw_GetBelongsPage(&_result);
	return _result;
}

inline void IDUILCItem::SetEnableDragOut(BOOL  bDragOut  )
{
	VARIANT_BOOL xxx_bDragOut = bDragOut ? VARIANT_TRUE : VARIANT_FALSE;

	raw_SetEnableDragOut(xxx_bDragOut  );
}

inline BOOL  IDUILCItem::IsCanDragOut()
{
	VARIANT_BOOL _result = VARIANT_FALSE;
	raw_IsCanDragOut(&_result);
	return _result ? TRUE : FALSE;
}

